public class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
		int n = obstacleGrid[0].length;
	    if(obstacleGrid[m - 1][n - 1] == 1) return 0; 
		
		int[][] result = new int[m][n];
		// row 0
		int defaultNum = 1;
		for(int j = 0; j < n ; j++){
		    if(obstacleGrid[0][j] == 0)
     			result[0][j] = defaultNum;
			else{
			    defaultNum = 0;
			    result[0][j] = defaultNum;	
			}
	            
		}
		// column 0
	    defaultNum = 1;
		for(int i = 0; i < m; i++){
			if(obstacleGrid[i][0] == 0)
			    result[i][0] = defaultNum;
		    else{
			    defaultNum = 0;
			    result[i][0] = defaultNum;
			}		
		}
		
		for(int i = 1; i < m; i++){
		    for(int j = 1; j < n; j++){
			     if(obstacleGrid[i - 1][j] == 1 && obstacleGrid[i][j - 1] == 1)
				       result[i][j] = 0;
				 else if(obstacleGrid[i - 1][j] == 1)
				       result[i][j] = result[i][j - 1];
			     else if(obstacleGrid[i][j - 1] == 1)
				       result[i][j] = result[i - 1][j];
			     else 
				       result[i][j] = result[i - 1][j] + result[i][j - 1];
			}
		
		}

        return result[m - 1][n - 1];		
		
		
    }
}


class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid[0].length;
        int n = obstacleGrid.length;
        int[][] ways = new int[n][m];
        if(obstacleGrid[0][0] == 1) return 0;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(i == 0 && j == 0){
                    ways[0][0] = 1;
                }
                else if(i == 0){
                    ways[i][j] = obstacleGrid[i][j] == 1 ? 0 : ways[i][j - 1];
                }else if(j == 0){
                    ways[i][j] = obstacleGrid[i][j] == 1 ? 0 : ways[i - 1][j];
                }else{
                    ways[i][j] = obstacleGrid[i][j] == 1 ? 0 : ways[i - 1][j] + ways[i][j - 1];
                }
            }
        }
        return ways[n - 1][m - 1];
    }
}

class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        if(obstacleGrid[0][0] == 1) return 0;
        int[] dis = new int[obstacleGrid[0].length];
        dis[0] = 1;
        for(int i = 0; i < obstacleGrid.length; i++){
            for(int j = 0; j < obstacleGrid[0].length; j++){
                if(j == 0){
                    dis[j] = obstacleGrid[i][j] == 1 ? 0 : dis[j];
                }
                else
                    dis[j] = obstacleGrid[i][j] == 1 ? 0 : dis[j - 1] + dis[j];
            }
        }
        return dis[dis.length - 1];
    }
}
