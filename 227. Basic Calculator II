class Solution {
    public int calculate(String s) {
        if(s == null || s.length() == 0) return 0;
        int num = 0;
        char oper = '+';
        Stack<Integer> stack = new Stack<>();
        for(int i = 0; i < s.length(); i++){
            if(Character.isDigit(s.charAt(i))){
                num = num*10 + s.charAt(i) - '0';
            }
            char ch = s.charAt(i);
            if((!Character.isDigit(ch) && ch != ' ')
              || i == s.length()-1){
                if(oper == '+'){
                    stack.push(num);
                }else if(oper == '-'){
                    stack.push(-num);
                }else if(oper == '/'){
                    stack.push(stack.pop()/num);
                }else if(oper == '*'){
                    stack.push(stack.pop()*num);
                }
                oper = ch;
                num = 0;
            }
        }
        int sum = 0;
        for(int n : stack){
            sum += n;
        }
        return sum;
    }
}

public class Solution {
    public int calculate(String s) {
        int len;
        if(s == null || (len = s.length()) == 0) return 0;
        Stack<Integer> numpool = new Stack<Integer>();
        int num = 0;
        char sign = '+';
        for(int i = 0; i < len; i ++){
        	if(Character.isDigit(s.charAt(i))){
        		num = num * 10 + s.charAt(i) - '0';
        	}
        	if((!Character.isDigit(s.charAt(i)) && s.charAt(i) != ' ') || i == len - 1){
        		if(sign == '+') numpool.push(num);
        		if(sign == '-') numpool.push(-num);
        		if(sign == '*') numpool.push(numpool.pop() * num);
        		if(sign == '/') numpool.push(numpool.pop() / num);
        		sign = s.charAt(i);
                num = 0; //each new number, wo need initialize num
        	}
        }
        int res = 0;
        for(int i : numpool)
        	res = res + i;

        return res;

    }
}

class Solution {
    public int calculate(String s) {
        Stack<Integer> stack = new Stack<>();
        //int result = 0;
        int digit = 0;
        char sign = '+';
        for(int i = 0; i < s.length(); i++){
            if(Character.isDigit(s.charAt(i))){
                digit = s.charAt(i) - '0';
                while(i < s.length() - 1 && Character.isDigit(s.charAt(i + 1))){
                    digit = digit * 10 + s.charAt(i + 1) - '0';
                    i++;
                }
            }
            if((!Character.isDigit(s.charAt(i)) && s.charAt(i) != ' ') || i == s.length() - 1){//i is operator
                if(sign == '+') stack.push(digit);
                else if(sign == '-') stack.push(-digit);
                else if(sign == '*') stack.push(stack.pop() * digit);
                else if(sign == '/') stack.push(stack.pop() / digit);
                sign = s.charAt(i);
                digit = 0;
            }
        }
        int result = 0;
        while(!stack.isEmpty()){
            result += stack.pop();
        }
        return result;
    }
}
