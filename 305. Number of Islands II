class Solution {
    private int[][] dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    public List<Integer> numIslands2(int m, int n, int[][] positions) {
        List<Integer> result = new ArrayList<>();
        if(positions == null || positions.length == 0) return result;
        int[] board = new int[m*n];
        Arrays.fill(board, -1);
        int count = 0;
        for(int[] pos : positions){
            int color = pos[0]*n + pos[1];
            board[color] = color;
            count++;
            for(int[] dir : dirs){
                int newX = pos[0]+dir[0];
                int newY = pos[1]+dir[1];
                int idx = newX*n + newY;
                if(newX < 0 || newX >= m || newY < 0 || newY >= n || board[idx] == -1) continue;
                int neighborColor = getColor(board, idx);
                if(neighborColor != color){
                    board[color] = neighborColor;
                    color = neighborColor;
                    count--;
                }
            }
            result.add(count);
        }
        return result;
    }
    
    public int getColor(int[] root, int id){
        while(root[id] != id){
            root[id] = root[root[id]];
            id = root[id];
        }
        return id;
    }
}
