class Solution {
    private int R, L;
    private int[][] dirs = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
    public int numIslands(char[][] grid) {
        if(grid.length == 0 || grid[0].length == 0) return 0;
        R = grid.length; L = grid[0].length;
        int count = 0;
        for(int i = 0; i < R; i++){
            for(int j = 0; j < L; j++){
                if(grid[i][j] == '1'){
                    dfs(grid, i, j);
                    count++;
                }
            }
        }
        return count;
    }
    
    public void dfs(char[][] grid, int i, int j){
        if(i < 0 || i >= R || j < 0 || j >= L || grid[i][j] == '0')
            return;
        grid[i][j] = '0';
        for(int[] dir : dirs){
            dfs(grid, i+dir[0], j+dir[1]);
        }
    }
}



public class Solution {
    private int rowL;
    private int colL;
    public int numIslands(char[][] grid) {
        int count = 0;
        colL = grid.length;
        if(colL == 0) return 0;
        rowL = grid[0].length;
        for(int i = 0; i < colL; i++){
            for(int j = 0; j < rowL; j++){
                if(grid[i][j] == '1'){
                    changeToWater(grid, i ,j);
                    count++;
                }
            }
        }
        return count;
    }
    
    public void changeToWater(char[][] grid, int i, int j){
        if(i < 0 || i >= colL || j < 0 || j >= rowL) return;
        if(grid[i][j] != '1') return;
        grid[i][j] = 0;
        changeToWater(grid, i - 1, j);
        changeToWater(grid, i + 1, j);
        changeToWater(grid, i, j - 1);
        changeToWater(grid, i, j + 1);
    }
    
}


class Solution {
    int area = 0;
    public int numIslands(char[][] grid) {
        if(grid.length == 0 || grid[0].length == 0) return 0;
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[0].length; j++){
                if(grid[i][j] == '1'){
                    area++;
                    extend(grid, i, j);
                }
            }
        }
        return area;
    }
    
    public void extend(char[][]grid, int i, int j){//grid[i][j]
        if(i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == '0')
            return;
        grid[i][j] = '0';
        extend(grid, i + 1, j);
        extend(grid, i - 1, j);
        extend(grid, i, j - 1);
        extend(grid, i, j + 1);
    }
}


class Solution {
    //the number of total islands
    private int islands = 0;
    // the possible directions
    private int[][] dirs = {{-1, 0}, {1, 0}, {0, -1}, {0 ,1}};
    public int numIslands(char[][] grid) {
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[0].length; j++){
                if(grid[i][j] == '1'){
                    check(grid, i, j);
                    islands++;
                }
                    
            }
        }
        return islands;
    }
    
    public void check(char[][] grid, int i, int j){
        if(i < 0 || i >= grid.length || j <0 || j >= grid[0].length || grid[i][j] != '1'){
            return;
        }
        grid[i][j] = '0';
        for(int[] dir : dirs){
            check(grid, i + dir[0], j + dir[1]);
        }
    }
    
    
}
