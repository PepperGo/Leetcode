class Solution {
    private int[][] dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
    
    public List<int[]> pacificAtlantic(int[][] matrix) {
        List<int[]> result = new ArrayList<>();
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0)
            return result;
        int m = matrix.length;
        int n = matrix[0].length;
        boolean[][] pacific = new boolean[m][n];
        boolean[][] atlantic = new boolean[m][n];
        
        for(int i = 0; i < m; i++){
            flow(pacific, matrix, Integer.MIN_VALUE, i, 0);
            flow(atlantic, matrix, Integer.MIN_VALUE, i, n-1);
        }
        
        for(int j = 0; j < n; j++){
            flow(pacific, matrix, Integer.MIN_VALUE, 0, j);
            flow(atlantic, matrix, Integer.MIN_VALUE, m - 1, j);
        }
        
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(pacific[i][j] && atlantic[i][j]){
                    result.add(new int[] {i, j});
                }
            }
        }
        return result;
    }
    
    public void flow(boolean[][] visited, int[][] matrix, int min, int x, int y){
        if(x < 0 || x >= matrix.length || y < 0 || y >= matrix[0].length || visited[x][y] || matrix[x][y] < min)
            return;
        visited[x][y] = true;
        for(int[] dir : dirs){
            flow(visited, matrix, matrix[x][y], x + dir[0], y + dir[1]);
        }
    }
    
}
