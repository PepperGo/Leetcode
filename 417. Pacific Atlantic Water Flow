//dfs
class Solution {
    private int R, L;
    private int[][] dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    public List<int[]> pacificAtlantic(int[][] matrix) {
        List<int[]> result = new ArrayList<>();
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0) return result;
        R = matrix.length;
        L = matrix[0].length;
        Queue<int[]> atlanticQ = new LinkedList<>();
        Queue<int[]> pacificQ = new LinkedList<>();
        boolean[][] isAtlantic = new boolean[R][L];
        boolean[][] isPacific = new boolean[R][L];
        
        for(int i = 0; i < R; i++){
            dfs(matrix, isAtlantic, i, 0, Integer.MIN_VALUE);
            dfs(matrix, isPacific, i, L-1, Integer.MIN_VALUE);
        }
        for(int j = 0; j < L; j++){
            dfs(matrix, isAtlantic, 0, j, Integer.MIN_VALUE);
            dfs(matrix, isPacific, R-1, j, Integer.MIN_VALUE);
        }
    
        
        for(int i = 0; i < R; i++){
            for(int j = 0; j < L; j++){
                if(isPacific[i][j] && isAtlantic[i][j]){
                    result.add(new int[]{i, j});
                }
            }
        }
        return result;
        
    }
    
    public void dfs(int[][] matrix, boolean[][] isVisited, int x, int y, int height){
        if(x < 0 || x >= R || y < 0 || y >= L || isVisited[x][y] || matrix[x][y] < height)
            return;
        isVisited[x][y] = true;
        for(int[] dir : dirs){
            dfs(matrix, isVisited, x+dir[0], y+dir[1], matrix[x][y]);
        }
    }
}

//BFS
class Solution {
    private int R, L;
    private int[][] dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    public List<int[]> pacificAtlantic(int[][] matrix) {
        List<int[]> result = new ArrayList<>();
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0) return result;
        R = matrix.length;
        L = matrix[0].length;
        Queue<int[]> atlanticQ = new LinkedList<>();
        Queue<int[]> pacificQ = new LinkedList<>();
        boolean[][] isAtlantic = new boolean[R][L];
        boolean[][] isPacific = new boolean[R][L];
        
        for(int i = 0; i < R; i++){
            pacificQ.offer(new int[]{i, 0});
            atlanticQ.offer(new int[]{i, L-1});
            isPacific[i][0] = true;
            isAtlantic[i][L-1] = true;
        }
        for(int j = 0; j < L; j++){
            pacificQ.offer(new int[]{0, j});
            atlanticQ.offer(new int[]{R-1, j});
            isPacific[0][j] = true;
            isAtlantic[R-1][j] = true;
        }
        bfs(matrix, pacificQ, isPacific);
        bfs(matrix, atlanticQ, isAtlantic);
        for(int i = 0; i < R; i++){
            for(int j = 0; j < L; j++){
                if(isPacific[i][j] && isAtlantic[i][j]){
                    result.add(new int[]{i, j});
                }
            }
        }
        return result;
        
    }
    
    public void bfs(int[][] matrix, Queue<int[]> queue, boolean[][] isVisited){
        while(!queue.isEmpty()){
            int[] cur = queue.poll();
            for(int[] dir : dirs){
                int newX = cur[0]+dir[0];
                int newY = cur[1]+dir[1];
                if(newX < 0 || newX >= R || newY < 0 || newY >= L 
                   || isVisited[newX][newY] || matrix[newX][newY] < matrix[cur[0]][cur[1]])
                    continue;
                isVisited[newX][newY] = true;
                queue.offer(new int[]{newX, newY});
            }
        }
    }
}


class Solution {
    private int[][] dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
    
    public List<int[]> pacificAtlantic(int[][] matrix) {
        List<int[]> result = new ArrayList<>();
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0)
            return result;
        int m = matrix.length;
        int n = matrix[0].length;
        boolean[][] pacific = new boolean[m][n];
        boolean[][] atlantic = new boolean[m][n];
        
        for(int i = 0; i < m; i++){
            flow(pacific, matrix, Integer.MIN_VALUE, i, 0);
            flow(atlantic, matrix, Integer.MIN_VALUE, i, n-1);
        }
        
        for(int j = 0; j < n; j++){
            flow(pacific, matrix, Integer.MIN_VALUE, 0, j);
            flow(atlantic, matrix, Integer.MIN_VALUE, m - 1, j);
        }
        
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(pacific[i][j] && atlantic[i][j]){
                    result.add(new int[] {i, j});
                }
            }
        }
        return result;
    }
    
    public void flow(boolean[][] visited, int[][] matrix, int min, int x, int y){
        if(x < 0 || x >= matrix.length || y < 0 || y >= matrix[0].length || visited[x][y] || matrix[x][y] < min)
            return;
        visited[x][y] = true;
        for(int[] dir : dirs){
            flow(visited, matrix, matrix[x][y], x + dir[0], y + dir[1]);
        }
    }
    
}
