class Solution {
    public int snakesAndLadders(int[][] board) {
        if(board == null || board.length == 0 || board[0].length == 0) return 0;
        int n = board.length;
        int[] newBoard = convertTo1DArray(board);
        int target = n * n - 1;
        int steps = 0;
        Queue<Integer> toVisit = new LinkedList<>();
        boolean[] isVisited = new boolean[n * n];
        int start = newBoard[0] == -1 ? 0 : newBoard[0] - 1;
        toVisit.offer(start);
        isVisited[start] = true;
        while(!toVisit.isEmpty()){
            int size = toVisit.size();
            while(size-- > 0){
                int cur = toVisit.poll();
                if(cur == target) return steps;
                for(int nextIndex = cur + 1; nextIndex <= Math.min(target, cur + 6); nextIndex++){
                    int destination = newBoard[nextIndex] == -1 ? nextIndex : newBoard[nextIndex] - 1;
                    if(isVisited[destination]) continue;
                    toVisit.offer(destination);
                    isVisited[nextIndex] = true;
                }
            }
            steps++;
        }
        return -1;
    }
    
    public int[] convertTo1DArray(int[][] board){
        int n = board.length;
        int[] newArray = new int[n * n];
        int idx = 0;
        boolean leftToRight = true;
        for(int i = n - 1; i >= 0; i--){
            for(int j = 0; j < n; j++){
                if(leftToRight)
                    newArray[idx++] = board[i][j];
                else
                    newArray[idx++] = board[i][n - j - 1];
            }
            leftToRight = !leftToRight;
        }
        return newArray;
    }
}



class Solution {
    public int snakesAndLadders(int[][] board) {
        if(board == null || board.length == 0 || board[0].length == 0) return 0;
        int m = board.length, n = board[0].length;
        int[] array = convertTo1DArray(board, m, n);
        int target = m * n;
        int steps = 0;
        int start = array[1] == -1 ? 1 : array[1];
        Queue<Integer> toVisit = new LinkedList<>();
        toVisit.offer(start);
        boolean[] isVisited = new boolean[m*n + 1];

        while(!toVisit.isEmpty()){
            int size = toVisit.size();
            while(size-- > 0){
                int cur = toVisit.poll();
                if(cur == target) return steps;
                for(int i = cur + 1; i <= Math.min(cur + 6, target); i++){
                    int next = array[i] == -1 ? i : array[i];
                    if(isVisited[next]) continue;
                    toVisit.offer(next);
                    isVisited[next] = true;
                }
            }
            steps++;
        }
        return -1;
    }
    
    public int[] convertTo1DArray(int[][] board, int m, int n){
        int[] result = new int[m *n + 1];
        int index = 1;
        boolean leftToRight = true;
        for(int i = m - 1; i>= 0; i--){
            for(int j = 0; j < n; j++){
                if(leftToRight){
                    result[index++] = board[i][j];
                }else{
                    result[index++] = board[i][n - j - 1];
                }
            }
            leftToRight = !leftToRight;
        }
        return result;
    }
}
