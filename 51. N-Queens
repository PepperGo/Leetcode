class Solution {
    private List<List<String>> result;
    public List<List<String>> solveNQueens(int n) {
        result = new ArrayList<>();
        char[][] board = new char[n][n];
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                board[i][j] = '.';
            }
        }
        solve(board, 0);
        return result;
    }
    
    public void solve(char[][] board, int col){
        if(col == board[0].length){
            result.add(constructResult(board));
            return;
        }
        for(int i = 0; i < board.length; i++){
            if(isValid(board, i, col)){
                board[i][col] = 'Q';
                solve(board, col+1);
                board[i][col] = '.';
            }
        }
    }
    
    public boolean isValid(char[][] board, int row, int col){
        //check all rows
        for(int j = 0; j < board[0].length; j++){
            if(board[row][j] == 'Q')
                return false;
        }
        //check 135 degree
        for(int i = row-1, j = col-1; i >= 0 && j >= 0; i--, j--){
            if(board[i][j] == 'Q')
                return false;
        }
        //check -135 degree
        for(int i = row+1, j = col-1; i < board.length && j >= 0; i++, j--){
            if(board[i][j] == 'Q')
                return false;
        }
        return true;
    }
    
    public List<String> constructResult(char[][] board){
        List<String> path = new ArrayList<>();
        for(char[] level : board){
            path.add(new String(level));
        }
        return path;
    }
}
