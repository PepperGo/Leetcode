/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isBalanced(TreeNode root) {
		if(root == null) return true;
		if(Math.abs(getHeight(root.left) - getHeight(root.right)) <= 1 && isBalanced(root.left) && isBalanced(root.right)) return true;
		else return false;
    }
	
	public int getHeight(TreeNode root){
		if(root == null) return 0;
		else return Math.max(getHeight(root.left), getHeight(root.right)) + 1;
	}
}


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isBalanced(TreeNode root) {
        if(root == null) return true;
        return Math.abs(height(root.left) - height(root.right)) <=1 && isBalanced(root.left) && isBalanced(root.right);
    }
    
    public int height(TreeNode node){
        if(node == null) return 0;
        if(node.left == null && node.right == null) return 1;
        return Math.max(height(node.left), height(node.right)) + 1;
    }
}
