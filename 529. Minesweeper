class Solution {
    private int[][] dirs = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 0}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};
    public char[][] updateBoard(char[][] board, int[] click) {
        int x = click[0], y = click[1];
        if(board[x][y] == 'M') 
            board[x][y] = 'X';
        else
            dfs(board, x, y);
        return board;
    }
    
    public void dfs(char[][] board, int x, int y){
        if(x < 0 || x >= board.length || y < 0 || y >= board[0].length || board[x][y] != 'E')
            return;
        int minesCount = getAdjacentMines(board, x, y);
        if(minesCount == 0){
            board[x][y] = 'B';
            for(int[] dir : dirs){
                dfs(board, x + dir[0], y + dir[1]);
            }            
        }else{
            board[x][y] = (char) (minesCount + '0');
        }
    }
    
    
    public int getAdjacentMines(char[][] board, int x, int y){
        int count = 0;
        for(int i = x - 1; i <= x + 1; i++){
            for(int j = y - 1; j <= y + 1; j++){
                if(i >= 0 && i< board.length && j >= 0 && j < board[0].length
                  && board[i][j] == 'M')
                    count++;
            }
        }
        return count;
    }
}
