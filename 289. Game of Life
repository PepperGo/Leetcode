class Solution {
    private int R, L;
    public void gameOfLife(int[][] board) {
        // 00 (dead -> dead)   0
        // 10 (dead -> live)   2
        // 01 (live -> dead)   1
        // 11 (live -> live)   3
        // m & 1 = current status
        // m >> 1 = next status
        R = board.length;
        L = board[0].length;
        for(int i = 0; i < R; i++){
            for(int j = 0; j < L; j++){
                int count = getNeighbors(board, i, j);
                if(board[i][j] == 1){
                    if(count < 2 || count > 3){
                        board[i][j] = 1;
                    }else {
                        //if(count ==2 || count == 3)
                        board[i][j] = 3;
                    }
                }else{
                    if(count == 3){
                        board[i][j] = 2;
                    }
                }
            }
        }
        
        for(int i = 0; i < R; i++){
            for(int j = 0; j < L; j++){
                board[i][j] >>= 1;
            }
        }
        
    }
    
    public int getNeighbors(int[][] board, int x, int y){
        int count = 0;
        for(int i = Math.max(0, x-1); i <= Math.min(x+1, R-1); i++){
            for(int j = Math.max(0, y-1); j <= Math.min(y+1, L-1); j++){
                if((board[i][j] & 1) == 1)
                    count++;
            }
        }
        count -= board[x][y] & 1;//two loops count 9 squares, need to deduct the center
        return count;
    }
}
