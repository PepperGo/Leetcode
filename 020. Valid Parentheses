
public boolean isValid(String s) {
	Stack<Character> stack = new Stack<Character>();
	for (char c : s.toCharArray()) {
		if (c == '(')
			stack.push(')');
		else if (c == '{')
			stack.push('}');
		else if (c == '[')
			stack.push(']');
		else if (stack.isEmpty() || stack.pop() != c)
			return false;
	}
	return stack.isEmpty();
}

public class Solution {
    public boolean isValid(String s) {
        ArrayList<Character> operStack = new ArrayList<Character>();
        int top = -1;
        if(s.length() == 0) return true;
        
        for(int i = 0; i < s.length(); i++){
            if(leftOperator(s.charAt(i))){
                operStack.add(s.charAt(i));
                top++;
            }
            else if(rightOperator(s.charAt(i))){
                     if(operStack.size() > 0  && matches(operStack.get(top), s.charAt(i))){
                         operStack.remove(top);
                         top--;
                 }
                 else return false;
            }
         }
                 
         if(top == -1) return true;
         else return false;
    }
    
     public boolean leftOperator(char s){
        if(s == '(' || s == '{' || s == '[')
             return true;
        else
             return false;
    }
    
    public boolean rightOperator(char s){
        if(s == ')' || s == '}' || s == ']')
             return true;
        else
             return false;
    }
    
    public boolean matches(char a, char b){
        if(( a == '(' && b == ')' ) || (a == '{' && b == '}') || (a == '[' && b == ']')) return true;
        else return false;
    }
    
}
    
class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        for(int i = 0; i < s.length(); i++){
            char ch = s.charAt(i);
            if(ch == '(' || ch == '{' || ch == '['){
                stack.push(ch);
            }else{
                if(stack.isEmpty() || !isPair(stack.pop(), ch)){
                    return false;
                }
            }
        }
        return stack.isEmpty();
    }
    
    public boolean isPair(char ch1, char ch2){
        if(ch1 == '(' && ch2 == ')') return true;
        if(ch1 == '[' && ch2 == ']') return true;
        if(ch1 == '{' && ch2 == '}') return true;
        return false;
    }
}




class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        char[] charArray = s.toCharArray();
        for(int i = 0; i < charArray.length; i++){
            char charS = charArray[i];
            if(charS == '('){
                stack.push(')');
            }else if(charS == '{'){
                stack.push('}');
            }else if(charS == '['){
                stack.push(']');
            }else{
                if(stack.isEmpty() || charS != stack.pop()){
                    return false;
                }
            }
        }
        return stack.isEmpty();
    }
}
