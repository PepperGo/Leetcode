/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> boundaryOfBinaryTree(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        if(root == null) return result;
        result.add(root.val);
        getLeftBoundary(root.left, result);
        getLeaves(root.left, result);
        getLeaves(root.right, result);
        getRightBoundary(root.right, result);
        
        return result;
    }
    
    public void getLeftBoundary(TreeNode node, List<Integer> result){
        if(node == null ||(node.left == null && node.right ==null)) return;
        result.add(node.val);
        if(node.left == null)
            getLeftBoundary(node.right, result);
        else
            getLeftBoundary(node.left, result);
    }
    
    //backtrack
    public void getRightBoundary(TreeNode node, List<Integer> result){
        if(node == null || (node.left == null && node.right == null)) return;
        if(node.right == null){
            getRightBoundary(node.left, result);
        }else{
            getRightBoundary(node.right, result);
        }
        result.add(node.val);
    }
    
    public void getLeaves(TreeNode node, List<Integer> result){
        if(node == null) return;
        if(node.left == null && node.right == null){
            result.add(node.val);
            return;
        }
        getLeaves(node.left, result);
        getLeaves(node.right, result);
    }
    
}
