class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        TreeNode cur = root;
        while(true){
            if((p.val > cur.val && q.val > cur.val))
                cur = cur.right;
            else if(p.val < cur.val && q.val < cur.val){
                cur = cur.left;
            }else
                break;
        }
        return cur;
    }
}

class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if((p.val > root.val && q.val > root.val))
            return lowestCommonAncestor(root.right, p, q);
         if(p.val < root.val && q.val < root.val)
             return lowestCommonAncestor(root.left, p, q);
        return root;
    }
}




class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        while((root.val - p.val)*(root.val - q.val) > 0)
			root = root.val > p.val ? root.left : root.right;
		return root;
    }
}


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        while((root != null) && (root.val - p.val) * (root.val - q.val) > 0){
            root = root.val > p.val ? root.left : root.right;
        } 
        return root;
    }
}
