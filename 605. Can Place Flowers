class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        if(flowerbed.length == 1 && flowerbed[0] == 0) return true;
        for(int i = 0; i < flowerbed.length; i++){
            if(flowerbed[i] == 0){
                if(i == 0){
                    if(flowerbed[i + 1] == 0){
                        flowerbed[i] = 1;
                        n--;
                    }
                }else if(i == flowerbed.length - 1){
                    if(flowerbed[i - 1] == 0){
                        flowerbed[i] = 1;
                        n--;
                    }
                }else{
                    if(flowerbed[i - 1] == 0 && flowerbed[i + 1] == 0){
                        flowerbed[i] = 1;
                        n--;
                    }
                }
            }
            if(n <= 0) return true;
        }
        return false;
    }
}

### Notes:
1. The else parts are the same, we can refine it
2. change flowerbed[i] = 1 to flowerbed[i++] = 1 to skip the neighbor;

The codes become:

class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        if(flowerbed.length == 1 && flowerbed[0] == 0) return true;
        for(int i = 0; i < flowerbed.length; i++){
            if(flowerbed[i] == 0 && (i == 0 || flowerbed[i - 1] == 0) && (i == flowerbed.length - 1 || flowerbed[i + 1] == 0)){
                  flowerbed[i++] = 1;
                  n--;
            }
            if(n <= 0) return true;
        }
        

        return false;
    }
}


### Discuss && Solution
public class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        int i = 0, count = 0;
        while (i < flowerbed.length) {
            if (flowerbed[i] == 0 && (i == 0 || flowerbed[i - 1] == 0) && (i == flowerbed.length - 1 || flowerbed[i + 1] == 0)) {
                flowerbed[i] = 1;
                count++;
            }
            i++;
        }
        return count >= n;
    }
}


public class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        int i = 0, count = 0;
        while (i < flowerbed.length) {
            if (flowerbed[i] == 0 && (i == 0 || flowerbed[i - 1] == 0) && (i == flowerbed.length - 1 || flowerbed[i + 1] == 0)) {
                flowerbed[i++] = 1;
                count++;
            }
             if(count>=n)
                return true;
            i++;
        }
        return false;
    }
}
