class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> result = new ArrayList<>();
        backtrack(result, new ArrayList<>(), nums, 0);
        return result;
    }
    

    public void backtrack(List<List<Integer>> result, List<Integer> temp, int[] nums, int idx){
        if(idx > nums.length) return;
        result.add(new ArrayList(temp));
        for(int i = idx; i < nums.length; i++){
            if(i > idx && nums[i] == nums[i-1]) continue;
            temp.add(nums[i]);
            backtrack(result, temp, nums, i+1);
            temp.remove(temp.size()-1);
        }
    }
}

public class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<Integer> item = new ArrayList<Integer>();
		List<List<Integer>> result = new ArrayList<List<Integer>>();
		Arrays.sort(nums);
		getSubSetNoDup(result, item, nums, 0);
		return result;
    }
	
	public void getSubSetNoDup(List<List<Integer>> result, List<Integer> item, int[] nums, int start){
		result.add(new ArrayList<Integer> (item));
		for(int i = start; i < nums.length; i++){
			if(i > start && nums[i] == nums[i - 1])
				continue; 
			item.add(nums[i]);
			getSubSetNoDup(result, item, nums, i + 1);
			item.remove(item.size()-1);
		}
	}
}
