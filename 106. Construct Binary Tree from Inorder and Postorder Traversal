/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        return getRoot(postorder.length-1, 0, inorder.length-1, inorder, postorder);
    }
	
	public TreeNode getRoot(int indexPost, int inStart, int inEnd, int[] inorder, int[] postorder){
	     if(indexPost < 0 || inStart > inEnd) return null;
		 
		 TreeNode root = new TreeNode(postorder[indexPost]);
		 int inIndex = 0;
		 for(int i = 0; i < inorder.length; i++){
		     if(postorder[indexPost] == inorder[i]){
			     inIndex = i;
				 break;
			 }			  
		 }
		 root.right = getRoot(indexPost - 1, inIndex + 1, inEnd, inorder, postorder);
		 root.left = getRoot(indexPost - 1 - (inEnd - inIndex), inStart, inIndex - 1, inorder, postorder);
		 
		 return root;
	
	
	}
}

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int index = 0;
    
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        index = postorder.length - 1;
        return buildTree(inorder, postorder, 0, postorder.length - 1);
    }
    
    public TreeNode buildTree(int[] inorder, int[] postorder, int start, int end){
        if(start > end) return null;
        int rootValue = postorder[index--];
        TreeNode root = new TreeNode(rootValue);
        if(start == end) return root;
        int pivot = start;
        for(; pivot <= end; pivot++){
            if(inorder[pivot] == rootValue)
                break;
        }
        root.right = buildTree(inorder, postorder, pivot + 1, end);
        root.left = buildTree(inorder, postorder, start, pivot - 1);
        return root;
    }
}
