/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    //the inserted nodes must be leaves
    public List<TreeNode> generateTrees(int n) {
        if(n == 0) return new ArrayList<TreeNode>();
		return getTreeList(1, n);
    }
    
    public List<TreeNode> getTreeList(int start, int end){
	    List<TreeNode> result = new ArrayList<TreeNode>();
	    if(start > end){
		    result.add(null);
			return result;
		}
		
		if(end == start){
		    result.add(new TreeNode(start));
			return result;
		}
		
		for(int i = start; i <= end; i++){
		    List<TreeNode> left = getTreeList(start, i - 1);
			List<TreeNode> right = getTreeList(i + 1, end);
			
			for(TreeNode leftNode : left){
			    for(TreeNode rightNode : right){
				    TreeNode root = new TreeNode(i);
					root.left = leftNode;
					root.right = rightNode;
					result.add(root);
				}
			
			}
		
		
		}
		return result;
	}
    
/*    
    public TreeNode insertTrees(TreeNode base, TreeNode item){
        if(base == null) return item;
        else if(item.val < base.val) base.left = insertTrees(base, item);
        else if(item.val > base.val) base.right = insertTrees(base, item);
        return base;
    }
	*/
}


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<TreeNode> generateTrees(int n) {
        if(n == 0) return new ArrayList<TreeNode>();
        return generateTrees(1, n);
    }
    
    public List<TreeNode> generateTrees(int start, int end){
        List<TreeNode> result = new ArrayList<TreeNode>();
        if(start > end){
            result.add(null);
            return result;
        }
        for(int i = start; i <= end; i++){
            List<TreeNode> ls = generateTrees(start, i - 1);
            List<TreeNode> rs = generateTrees(i + 1, end);
            for(TreeNode l : ls){
                for(TreeNode r : rs){
                    TreeNode index = new TreeNode(i);
                    index.left = l;
                    index.right = r;
                    result.add(index);
                }
            }
        }
        return result;
    }
}
