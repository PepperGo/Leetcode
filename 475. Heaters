class Solution {
    public int findRadius(int[] houses, int[] heaters) {
        Arrays.sort(houses);
        Arrays.sort(heaters);
        int[] distance = new int[houses.length];
        Arrays.fill(distance, Integer.MAX_VALUE);
        //heater is in the right of house
        for(int i = 0, j = 0; i < houses.length && j < heaters.length; ){
            if(houses[i] <= heaters[j]){
                distance[i] = heaters[j] - houses[i];
                i++;
            }else
                j++;
        }
        
        //heater is in the left of house
        for(int i = houses.length - 1, j = heaters.length - 1; i >= 0 && j >= 0; ){
            if(houses[i] >= heaters[j]){
                distance[i] = Math.min(distance[i], houses[i] - heaters[j]);
                i--;
            }else
                j--;
        }
        int r = 0;
        for(int d : distance){
            r = Math.max(d, r);
        }
        return r;
        
    }
}


class Solution {
    public int findRadius(int[] houses, int[] heaters) {
        int min = Integer.MIN_VALUE;
        Arrays.sort(heaters);
        for(int house : houses){
            int index = binarySearch(heaters, house);
            int dis1 = index <= 0 ? Integer.MAX_VALUE : house - heaters[index - 1];
            int dis2 = index >= heaters.length ? Integer.MAX_VALUE : heaters[index] - house;
            min = Math.max(min, Math.min(dis1, dis2));
        }
        return min;
    }
    
    //return the index in the sorted nums array
    public int binarySearch(int[] nums, int target){
        //[low, high)
        int low = 0, high = nums.length;
        while(low < high){
            int mid = low + (high - low)/2;
            if(nums[mid] < target){
                low = mid + 1;
            }else{
                high = mid;
            }
        }
        return low;
    }
}
