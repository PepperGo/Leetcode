class Solution {
    public int findShortestSubArray(int[] nums) {
        HashMap<Integer, Integer> numTable = new HashMap<Integer, Integer>();
        List<Integer> degreeNum = new ArrayList<Integer>();
        for(int num : nums){
            if(numTable.containsKey(num))
                numTable.put(num, numTable.get(num) + 1);
            else
                numTable.put(num, 1);
        }
        Map.Entry<Integer, Integer> maxEntry = null;
        for (Map.Entry<Integer, Integer> entry : numTable.entrySet()) {
            if (maxEntry == null || entry.getValue().compareTo(maxEntry.getValue()) >= 0) {
                maxEntry = entry;          
            } 
        }
        int maxCount = maxEntry.getValue();
        
        for (Map.Entry<Integer, Integer> entry : numTable.entrySet()) {
            if (entry.getValue().compareTo(maxCount) == 0) {
                degreeNum.add(entry.getKey());          
            } 
        }      

        int smallLength = Integer.MAX_VALUE;
        for(int num : degreeNum){
            System.out.println(num);
            int firstIndex = 0, endIndex = 0;
            for(int i = 0; i < nums.length; i++){
                if(nums[i] == num) {
                    firstIndex = i;
                    break;
                }
            }
            for(int i = 0; i < nums.length; i++){
                if(nums[i] == num){
                    endIndex = i;
                }
            }
            smallLength = Math.min(smallLength, endIndex - firstIndex + 1);
        }
        
        return smallLength;
    }
    
}


//-------------------------------------------------------------------
 public int findShortestSubArray(int[] nums) {
        if (nums.length == 0 || nums == null) return 0;
        Map<Integer, int[]> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++){
           if (!map.containsKey(nums[i])){
               map.put(nums[i], new int[]{1, i, i});  // the first element in array is degree, second is first index of this key, third is last index of this key
           } else {
               int[] temp = map.get(nums[i]);
               temp[0]++;
               temp[2] = i;
           }
        }
        int degree = Integer.MIN_VALUE, res = Integer.MAX_VALUE;
        for (int[] value : map.values()){
            if (value[0] > degree){
                degree = value[0];
                res = value[2] - value[1] + 1;
            } else if (value[0] == degree){
                res = Math.min( value[2] - value[1] + 1, res);
            } 
        }
        return res;
    }
