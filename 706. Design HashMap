class MyHashMap {

    ListNode[] nodes = new ListNode[10000];
        
    /** Initialize your data structure here. */
    public MyHashMap() {
        
    }
    
    /** value will always be non-negative. */
    public void put(int key, int value) {
        int idx = getHashCode(key);
        if(nodes[idx] == null){
            nodes[idx] = new ListNode(-1, -1);
        }
        ListNode prev = find(nodes[idx], key);
        if(prev.next == null)
            prev.next = new ListNode(key, value);
        else
            prev.next.val = value;
    }
    
    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */
    public int get(int key) {
        int idx = getHashCode(key);
        if(nodes[idx] == null) return -1;
        ListNode prev = find(nodes[idx], key);
        return prev.next == null ? -1 : prev.next.val;
    }
    
    /** Removes the mapping of the specified value key if this map contains a mapping for the key */
    public void remove(int key) {
        int idx = getHashCode(key);
        if(nodes[idx] == null) return;
        ListNode prev = find(nodes[idx], key);
        if(prev.next == null) return;
        prev.next = prev.next.next;
    }
    
    public ListNode find(ListNode bucket, int key){
        ListNode cur = bucket, prev = null;
        while(cur!= null && cur.key != key){
            prev = cur;
            cur = cur.next;            
        }
        return prev;
    }
    
    public int getHashCode(int key){
        return Integer.hashCode(key) % nodes.length;
    }
}

class ListNode{
    int key, val;
    ListNode next;
    ListNode(int key, int val){
        this.key = key;
        this.val = val;
    }
}

/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap obj = new MyHashMap();
 * obj.put(key,value);
 * int param_2 = obj.get(key);
 * obj.remove(key);
 */



//bad idea!!!!
class MyHashMap {    
    private int[] memory;
    private boolean[] isStore;
    /** Initialize your data structure here. */
    public MyHashMap() {
        memory = new int[1000001];
        isStore = new boolean[1000001];
    }
    
    /** value will always be non-negative. */
    public void put(int key, int value) {
        memory[key] = value;
        isStore[key] = true;
    }
    
    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */
    public int get(int key) {
        if(isStore[key]){
            return memory[key];
        }else
            return -1;
    }
    
    /** Removes the mapping of the specified value key if this map contains a mapping for the key */
    public void remove(int key) {
        memory[key] = 0;
        isStore[key] = false;
    }
}
