class Solution {
    public int[] findRedundantConnection(int[][] edges) {
        HashMap<Integer, ArrayList<Integer>> graph = new HashMap<>();
        for(int[] edge : edges){
            HashSet<Integer> visited = new HashSet<>();
            int u = edge[0];
            int v = edge[1];
            if(hasPath(graph, visited, u, v))
                return edge;
            graph.putIfAbsent(u, new ArrayList<Integer>());
            graph.get(u).add(v);
            graph.putIfAbsent(v, new ArrayList<Integer>());
            graph.get(v).add(u);
        }
        throw new IllegalArgumentException("No Circle");
    }
    
    public boolean hasPath(HashMap<Integer, ArrayList<Integer>> graph, HashSet<Integer> visited, int u, int v){
        if(u == v) return true;
        visited.add(u);
        if(!graph.containsKey(u) || !graph.containsKey(v)) return false;
        for(int next : graph.get(u)){
            if(visited.contains(next)) continue;
            if(hasPath(graph, visited, next, v))
                return true;
        }
        return false;
    }
}


class Solution {
    public int[] findRedundantConnection(int[][] edges) {
        DisjointUnionSet djs = new DisjointUnionSet(edges.length);
        for(int[] edge : edges){
            if(!djs.union(edge[0], edge[1]))
                return edge;
        }
        throw new AssertionError();
    }
}

class DisjointUnionSet{
    private int[] parent;
    private int[] rank;
    
    public DisjointUnionSet(int n){
        parent = new int[n + 1];
        rank = new int[n + 1];
        for(int i = 0; i < n + 1; i++){
            parent[i] = i;
        }
    }
    
    public int find(int x){
        if(parent[x] != x){
            return find(parent[x]);
        }else
            return x;
        /*** Better one **
        if (parent[x] != x) 
           parent[x] = find(parent[x]);
        return parent[x];
        */
    }
    
    
    
    public boolean union(int x, int y){
        int xp = find(x);
        int yp = find(y);
        
        if(xp == yp)
            return false;
        if(rank[xp] < rank[yp])
            parent[xp] = yp;
        else if(rank[xp] > rank[yp])
            parent[yp] = xp;
        else{
            parent[xp] = yp;
            rank[yp]++;
        }
        return true;
    }
}
