
class Solution {
    HashSet<Integer> set = new HashSet<>();
    public boolean findTarget(TreeNode root, int k) {
        return dfs(root, k);
    }
    
    public boolean dfs(TreeNode node, int target){
        if(node == null) return false;
        if(set.contains(node.val)){
            return true;
        }
        set.add(target - node.val);
        return dfs(node.left, target) || dfs(node.right, target);
    }
    
}


class Solution {
    HashSet<Integer> hashSet = new HashSet<>();
    boolean isFound = false;
    public boolean findTarget(TreeNode root, int k) {
        if(root == null) return false;
        traverse(root, k);
        return isFound;
    }
    
    public void traverse(TreeNode node, int sum){
        if(isFound) return;
        if(node == null) return;
        if(hashSet.contains(node.val)){
            isFound = true;
            return;
        }else{
            hashSet.add(sum - node.val);
        }
        traverse(node.left, sum);
        traverse(node.right, sum);
    }
}
