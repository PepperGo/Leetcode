/*Topological sorting!!!
According to the Wiki about what Topological sorting is (https://en.wikipedia.org/wiki/Topological_sorting)
and the Kahn's algorithm as shown below:
alt text
L ← Empty list that will contain the sorted elements
S ← Set of all nodes with no incoming edges
while S is non-empty do

remove a node n from S
add n to tail of L
for each node m with an edge e from n to m do
remove edge e from the graph
if m has no other incoming edges then
insert m into S
if graph has edges then
return error (graph has at least one cycle)
else
return L (a topologically sorted order)
*/

public class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int[][] graph = new int[numCourses][numCourses];
        int[] indegree = new int[numCourses];
        
        for(int i = 0; i < prerequisites.length; i++){
            int basic = prerequisites[i][0];
            int pre = prerequisites[i][1];
            if(graph[pre][basic] == 0)
               indegree[basic]++;
            graph[pre][basic] = 1;
        }
        
        int count = 0;
        Queue<Integer> queue = new LinkedList<Integer>();
        for(int i = 0; i < indegree.length; i++){
            if(indegree[i] == 0) queue.offer(i);
        }
        
        while(!queue.isEmpty()){
            int pre = queue.poll();
            count++;
            for(int i = 0; i < numCourses; i++){
                if(graph[pre][i] == 1){
                    if(--indegree[i] == 0)
                      queue.offer(i);
                }
            }
        }
        
        return count == numCourses;
    }
}


/* 	Time Limit Exceeded
 the reason is that the matrix is stored row by row in memory (adjacent I mean) ,
 so if you fix the row and loop through the column, it will take less time to fetch the memory, 
 but if you fix the column and go to loop through the column then you jump over a lot of gaps to find what you want.
public class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int[][] graph = new int[numCourses][numCourses];
        int[] indegree = new int[numCourses];
        
        for(int i = 0; i < prerequisites.length; i++){
            int basic = prerequisites[i][0];
            int pre = prerequisites[i][1];
            if(graph[basic][pre] == 0)
               indegree[basic]++;
            graph[basic][pre] = 1;
        }
        
        int count = 0;
        Queue<Integer> queue = new LinkedList<Integer>();
        for(int i = 0; i < numCourses; i++){
            if(indegree[i] == 0) queue.offer(i);
        }
        
        while(!queue.isEmpty()){
            int pre = queue.poll();
            count++;
            for(int i = 0; i < numCourses; i++){
                if(graph[i][pre] == 1){
                    if(--indegree[i] == 0)
                      queue.offer(i);
                }
            }
        }
        
        return count == numCourses;
    }
}
*/
