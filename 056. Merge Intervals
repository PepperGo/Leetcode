class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        Deque<Interval> result = new LinkedList<>();
        if(intervals == null || intervals.size() == 0) 
             return new ArrayList<Interval>(result);
        Collections.sort(intervals, new Comparator<Interval>(){
            public int compare(Interval i1, Interval i2){
                if(i1.start != i2.start){
                    return Integer.compare(i1.start, i2.start);
                }else{
                    return Integer.compare(i1.end, i2.end);
                }
            }
        });
        for(Interval a : intervals){
           if(result.isEmpty()){
               result.offerLast(a);
           }else{
               if(result.peekLast().end < a.start){
                   result.offerLast(a);
               }else{
                   result.peekLast().end = Math.max(result.peekLast().end, a.end);
               }
           }
        }
        return new ArrayList<Interval>(result);
        
    }
}


/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        List<Interval> result = new ArrayList<Interval>();
		//sort the intervals by each item's start
/*
		
		int length = intervals.size();
		for(int i = 0; i < intervals.size(); i++){
		    int index = 0;
		    for(int j = 0; j < length--; j++){
			    if(intervals.get(index).start > intervals.get(j).start)
				    index = j;
			}
			intervals.add(intervals.get(index));
            intervals.remove(index);			
		}
	*/	
	    Collections.sort(intervals, new Comparator<Interval>(){
            @Override
            public int compare(Interval obj0, Interval obj1) {
                return obj0.start - obj1.start;
            }
        });
       /*
       public interface More ...Comparator<T> {
       Parameters:
       o1 the first object to be compared.
       o2 the second object to be compared.
       Returns:
       a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater than the second.
       
       see: http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/java/util/Collections.java#Collections.sort%28java.util.List%2Cjava.util.Comparator%29
       */
		
    	if(intervals.size() == 0) return new ArrayList<Interval> (0);
		
		result.add(intervals.get(0));
		for(int i = 1; i < intervals.size(); i++){

			if(result.get(result.size()-1).end >= intervals.get(i).start && result.get(result.size()-1).end <= intervals.get(i).end){
			     Interval newIn = new Interval(result.get(result.size()-1).start, intervals.get(i).end);
				 result.remove(result.size()-1);
				 result.add(newIn);
			}else if(result.get(result.size()-1).end >= intervals.get(i).start && result.get(result.size()-1).end > intervals.get(i).end){
                 			
			}else{
			     result.add(intervals.get(i));
			}
			
		}
		
		return result;
    }
}

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    
    class IntervalComparator implements Comparator<Interval>{
        public int compare(Interval a, Interval b){
            return a.start - b.start;
        }
    }
    
    public List<Interval> merge(List<Interval> intervals) {
        Collections.sort(intervals, new IntervalComparator());
        List<Interval> result = new ArrayList<Interval>();
        for(Interval interval : intervals){
            if(result.size() == 0) 
                result.add(interval);
            else{
                if(result.get(result.size() - 1).end < interval.start){
                    result.add(interval);
                }else if(result.get(result.size() - 1).end >= interval.start && result.get(result.size() - 1).end <= interval.end){
                    result.get(result.size() - 1).end = interval.end;
                }
            }
        }
        return result;
    }
}

  merged.getLast().end = Math.max(merged.getLast().end, interval.end);
  
/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    
    class IntervalComparator implements Comparator<Interval>{
        public int compare(Interval i1, Interval i2){
            return i1.start - i2.start;
        }
    }
    
    public List<Interval> merge(List<Interval> intervals) {
        Collections.sort(intervals, new IntervalComparator());
        List<Interval> result = new ArrayList<>();
        for(Interval in : intervals){
            if(result.size() == 0){
                result.add(in);
                continue;
            }
            if(result.get(result.size() - 1).end < in.start){
                result.add(in);
            }else{
                if(result.get(result.size() - 1).end < in.end){
                    result.get(result.size() - 1).end = in.end;
                }
            }
        }
        return result;
    }
    /*
     for (Interval interval : intervals) {
            // if the list of merged intervals is empty or if the current
            // interval does not overlap with the previous, simply append it.
            if (merged.isEmpty() || merged.getLast().end < interval.start) {
                merged.add(interval);
            }
            // otherwise, there is overlap, so we merge the current and previous
            // intervals.
            else {
                merged.getLast().end = Math.max(merged.getLast().end, interval.end);
    }
    */
}
