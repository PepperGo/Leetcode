class Solution {
    HashMap<Integer, List<String>> hashMap = new HashMap<>();
    
    public List<String> wordBreak(String s, List<String> wordDict) {
        return wordBreak(s, new HashSet<String> (wordDict), 0);
    }
    
    public List<String> wordBreak(String s, Set<String> wordDict, int start){
        if(hashMap.containsKey(start)){
            return hashMap.get(start);
        }
        List<String> result = new ArrayList<>();
        
        if(start == s.length()){
            result.add("");
            return result;
        }
        
        for(int end = start + 1; end <= s.length(); end++){
            if(wordDict.contains(s.substring(start, end))){
                List<String> temp = wordBreak(s, wordDict, end);
                for(String str : temp){
                    result.add(s.substring(start, end) + (str.equals("") ? "" : " ") + str);
                    /*
                    if(str.equals("")){
                        result.add(s.substring(start, end));
                    }else{
                        result.add(s.substring(start, end) + " " + str);
                    }
                    */
                }
            }
        }
        hashMap.put(start, result);
        return result;
    }
}



public class Solution {
    public List<String> wordBreak(String s, List<String> wordDict) {
        LinkedList<String>[] dp = new LinkedList[s.length() + 1];
        LinkedList<String> initial = new LinkedList<>();
        initial.add("");
        dp[0] = initial;
        for (int i = 1; i <= s.length(); i++) {
            LinkedList<String> list = new LinkedList<>();
            for (int j = 0; j < i; j++) {
                if (dp[j].size() > 0 && wordDict.contains(s.substring(j, i))) {
                    for (String l : dp[j]) {
                        list.add(l + (l.equals("") ? "" : " ") + s.substring(j, i));
                    }
                }
            }
            dp[i] = list;
        }
        return dp[s.length()];
    }
}



/*
"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
["a","aa","aaa","aaaa","aaaaa","aaaaaa","aaaaaaa","aaaaaaaa","aaaaaaaaa","aaaaaaaaaa"]
*/


