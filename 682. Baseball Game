class Solution {
    int sum = 0;
    Stack<Integer> stack = new Stack<>();
    public int calPoints(String[] ops) {
        for(String op : ops){
            if(op.equals("+")){
                //op: "+"
                int lastOne = stack.pop();
                int lastTwo = stack.peek();
                stack.push(lastOne);
                int cur = lastOne+lastTwo;
                stack.push(cur);
                sum += cur;
            }else if(op.equals("C")){
                sum -= stack.pop();
            }else if(op.equals("D")){
                stack.push(stack.peek()*2);
                sum += stack.peek();
            }else{
                stack.push(Integer.parseInt(op));
                sum += Integer.parseInt(op);
            }
        }
        return sum;
    }
}

class Solution {
    public int calPoints(String[] ops) {
        int sum = 0;
        LinkedList<Integer> opsDeque = new LinkedList<Integer>();
        for(String op : ops){
            if(op.equals("C")){
                sum -= opsDeque.removeLast();
            }else if(op.equals("D")){
                opsDeque.add(opsDeque.peekLast() * 2);
                sum += opsDeque.peekLast();
            }else if(op.equals("+")){
                opsDeque.add(opsDeque.peekLast() + opsDeque.get(opsDeque.size() - 2));
                sum += opsDeque.peekLast();
            }else{
                opsDeque.offerLast(Integer.parseInt(op));
                sum += opsDeque.peekLast();
            }
                
        }
        return sum;
    }
}


class Solution {
    int sum = 0;
    Stack<Integer> stack = new Stack<>();
    public int calPoints(String[] ops) {
        for(String op : ops){
            if(op.matches("[-]?[0-9]*")){
                stack.push(Integer.parseInt(op));
                sum += Integer.parseInt(op);
            }else if(op.equals("C")){
                sum -= stack.pop();
            }else if(op.equals("D")){
                stack.push(stack.peek()*2);
                sum += stack.peek();
            }else{
                //op: "+"
                int lastOne = stack.pop();
                int lastTwo = stack.peek();
                stack.push(lastOne);
                int cur = lastOne+lastTwo;
                stack.push(cur);
                sum += cur;
            }
        }
        return sum;
    }
}
