class Solution {
    public int maxProfit(int[] prices) {
        int[] profits = new int[prices.length];
        int profit = 0, max = 0;
        for(int i = 1; i < prices.length; i++){
            profit = Math.max(0, profit + prices[i] - prices[i - 1]);
            max = Math.max(max, profit);
        }
        return max;
    }
}

public class Solution {
    public int maxProfit(int[] prices) {
        if(prices.length == 0) return 0;
        int min = prices[0];
        int profit = 0;
        for(int i = 0; i < prices.length; i++){
            if(prices[i]<min){
                min = prices[i];
            }
            else
                profit = profit < (prices[i] - min) ? (prices[i] - min) : profit;
        }
        return profit;
    }
}


class Solution {
    public int maxProfit(int[] prices) {
        int[] profits = new int[prices.length];
        for(int i = 0; i < prices.length; i++){
            for(int j = i + 1; j < prices.length; j++){
                profits[i] = Math.max(profits[i], prices[j] - prices[i]);
            }
        }
        int maxValue = 0;
        for(int i = 0; i < profits.length; i++){
            maxValue = Math.max(maxValue, profits[i]);
        }
        return maxValue;
    }
}


class Solution {
    public int maxProfit(int[] prices) {
        int curProfit = 0, maxProfit = 0;
        for(int i = 1; i < prices.length; i++){
            curProfit = Math.max(0, curProfit + prices[i] - prices[i - 1]);
            maxProfit = Math.max(maxProfit, curProfit);
        }
        return maxProfit;
    }
}
