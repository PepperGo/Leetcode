class Solution {
    public int maxSubArray(int[] nums) {
        int[] sums = new int[nums.length];//sums[i] means ending at nums[i]
        sums[0] = nums[0];
        int maxSum = sums[0];
        for(int i = 1; i < nums.length; i++) {
            sums[i] = sums[i-1] < 0 ? nums[i] : sums[i-1] + nums[i];
            maxSum = Math.max(maxSum, sums[i]);
        }
        return maxSum;
    }
}

class Solution {
    public int maxSubArray(int[] nums) {
        int sum = Integer.MIN_VALUE;
        int maxSum = sum;
        for(int i = 0; i < nums.length; i++) {
            if(sum < 0) {
                sum = nums[i];
            } else {
                sum += nums[i];
            }
            maxSum = Math.max(maxSum, sum);
        }
        return maxSum;
    }
}

class Solution {
    public int maxSubArray(int[] nums) {
        int sum = nums[0];
        int maxSum = sum;
        for(int i = 1; i < nums.length; i++) {
            sum = Math.max(nums[i], sum + nums[i]);
            maxSum = Math.max(maxSum, sum);
        }
        return maxSum;
    }
}

class Solution {
    public int maxSubArray(int[] nums) {
        if(nums.length == 0) return 0;
        int[] dp = new int[nums.length]; //dp[i]: the max sum end at index i
        dp[0] = nums[0];
        int max = dp[0];
        for(int i = 0; i < nums.length-1; i++){
            dp[i+1] = nums[i+1] + (dp[i] > 0 ? dp[i] : 0);
            max = Math.max(max, dp[i+1]);
        }
        return max;
    }
}


public class Solution {
    public int maxSubArray(int[] nums) {
        int[] maxnums = new int[nums.length];
        int max = nums[0];
        maxnums[0] = nums[0];
        for(int i = 1; i < nums.length; i++){
            maxnums[i] = nums[i] + (maxnums[i-1] > 0 ? maxnums[i-1] : 0);
            max = Math.max(max,maxnums[i]);
        }
        return max;
        
    }
}

class Solution {
    public int maxSubArray(int[] nums) {
        int[] sum = new int[nums.length];
        sum[0] = nums[0];
        int result = sum[0];
        for(int i = 1; i < nums.length; i++){
            sum[i] = sum[i-1] > 0 ? sum[i-1] + nums[i] : nums[i];
            result = Math.max(result, sum[i]);
        }
        return result;
    }
}

class Solution {
    public int maxSubArray(int[] nums) {
        int sum = nums[0];
        int result = sum;
        for(int i = 1; i < nums.length; i++){
            sum = sum > 0 ? sum + nums[i] : nums[i];
            result = Math.max(sum, result);
        }
        return result;
    }
}
