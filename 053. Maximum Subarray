public class Solution {
    public int maxSubArray(int[] nums) {
        int[] maxnums = new int[nums.length];
        int max = nums[0];
        maxnums[0] = nums[0];
        for(int i = 1; i < nums.length; i++){
            maxnums[i] = nums[i] + (maxnums[i-1] > 0 ? maxnums[i-1] : 0);
            max = Math.max(max,maxnums[i]);
        }
        return max;
        
    }
}

class Solution {
    public int maxSubArray(int[] nums) {
        int[] sum = new int[nums.length];
        sum[0] = nums[0];
        int result = sum[0];
        for(int i = 1; i < nums.length; i++){
            sum[i] = sum[i-1] > 0 ? sum[i-1] + nums[i] : nums[i];
            result = Math.max(result, sum[i]);
        }
        return result;
    }
}

class Solution {
    public int maxSubArray(int[] nums) {
        int sum = nums[0];
        int result = sum;
        for(int i = 1; i < nums.length; i++){
            sum = sum > 0 ? sum + nums[i] : nums[i];
            result = Math.max(sum, result);
        }
        return result;
    }
}
