class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        Map<TreeNode, TreeNode> parent = new HashMap<>();
        Stack<TreeNode> stack = new Stack<>();
        parent.put(root, null);
        stack.push(root);
        while(!stack.isEmpty()){
            TreeNode cur = stack.pop();
            if(cur.left != null){
                stack.push(cur.left);
                parent.put(cur.left, cur);
            }
            if(cur.right != null){
                stack.push(cur.right);
                parent.put(cur.right, cur);
            }
        }
        Set<TreeNode> ancesters = new HashSet<>();
        while(p != null){
            ancesters.add(p);
            p = parent.get(p);
        }
        while(!ancesters.contains(q)){
            q = parent.get(q);
        }
        return q;
    }
}


class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null || root == p || root == q) return root;
        TreeNode left = lowestCommonAncestor(root.left, p, q);
        TreeNode right = lowestCommonAncestor(root.right, p, q);
        if(left != null && right != null) return root;
        return left != null ? left : right;
    }
    
    
}


class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
	   if(root == null || root == p || root == q) return root;
	   TreeNode left = lowestCommonAncestor(root.left, p, q);
	   TreeNode right = lowestCommonAncestor(root.right, p, q);
	   
	   if(left == null) return right;
	   else if(right == null) return left;
	   else return root;
    }
}

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null || root == p || root == q)
            return root;
        TreeNode left = lowestCommonAncestor(root.left, p, q);
        TreeNode right = lowestCommonAncestor(root.right, p, q);
        if(left != null && right != null){
            return root;
        }else if(left == null){
            return right;
        }else if(right == null){
            return left;
        }else
            return null;
    }
}
