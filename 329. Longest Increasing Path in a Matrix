class Solution {
    private int R, L;
    private int[][] dirs = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
    private int[][] cache;
    public int longestIncreasingPath(int[][] matrix) {
        if(matrix == null || matrix.length == 0) return 0;
        R = matrix.length; L = matrix[0].length;
        cache = new int[R][L];
        int max = 1;
        for(int i = 0; i < R; i++){
            for(int j = 0; j < L; j++){
                max = Math.max(max, dfs(matrix, i, j));
            }
        }
        return max;
    }
    
    public int dfs(int[][] matrix, int x, int y){
        if(cache[x][y] != 0) return cache[x][y];
        int max = 1;
        for(int[] dir : dirs){
            int newX = x + dir[0];
            int newY = y + dir[1];
            if(newX < 0 || newX >= R || newY < 0 || newY >= L || matrix[newX][newY] <= matrix[x][y]) continue;
            int len = dfs(matrix, newX, newY)+1;
            max = Math.max(max, len);
        }
        cache[x][y] = max;
        return cache[x][y];
    }
}
