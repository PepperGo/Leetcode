public class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<Integer> item = new ArrayList<Integer>();
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        getSubsets(result, item, nums, 0);
        return result;
    }
    
    public void getSubsets(List<List<Integer>> result, List<Integer> item, int[] nums, int start){
        result.add(new ArrayList<Integer> (item));
        for(int i = start; i <  nums.length; i++){
            item.add(nums[i]);
            getSubsets(result, item, nums, i + 1);
            item.remove(item.size() - 1);
        }
    }
}


class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> result = new ArrayList<>();
        backtrack(result, new ArrayList<Integer>(), nums, 0);
        return result;
    }
    
    public void backtrack(List<List<Integer>> result, List<Integer> item, int[] nums, int index){
        result.add(new ArrayList<Integer> (item));
        for(int i = index; i < nums.length; i++){
            item.add(nums[i]);
            backtrack(result, item, nums, i + 1);
            item.remove(item.size() - 1);
        }
    }
}

[C++ Recursive/Iterative/Bit-Manipulation](https://leetcode.com/problems/subsets/discuss/27278/C++-RecursiveIterativeBit-Manipulation)   

public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        result.add(new ArrayList<>());
        for(int n : nums){
            int size = result.size();
            for(int i=0; i<size; i++){
                List<Integer> subset = new ArrayList<>(result.get(i));
                subset.add(n);
                result.add(subset);
            }
        }
        return result;
    }
    
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        result.add(new ArrayList<Integer>());
        for(int num : nums){
            int size = result.size();
            for(int i = 0; i < size; i++){
                List<Integer> subset = new ArrayList<>(result.get(i));
                subset.add(num);
                result.add(subset);
            }
        }
        return result;
    }
}
