public class Solution {
    public void connect(TreeLinkNode root) {
        if(root == null) return;
        Queue<TreeLinkNode> queue = new LinkedList<>();
        queue.offer(root);
        while(!queue.isEmpty()){
            int size = queue.size();
            TreeLinkNode next = null;
            while(size-- > 0){
                TreeLinkNode cur = queue.poll();
                cur.next = next;
                next = cur;
                //insert right first
                if(cur.right != null)
                    queue.offer(cur.right);
                if(cur.left != null)
                    queue.offer(cur.left);
            }
        } 
    }
}


public class Solution {
    
    public void connect(TreeLinkNode root) {
        TreeLinkNode levelstart = root;
        while(levelstart != null){
            TreeLinkNode cur = levelstart;
            while(cur != null){
                if(cur.left != null) cur.left.next = cur.right;
                if(cur.right != null && cur.next != null) cur.right.next = cur.next.left;
                cur = cur.next;
            }
            levelstart = levelstart.left;
        }
    }
    
}


/**
 * Definition for binary tree with next pointer.
 * public class TreeLinkNode {
 *     int val;
 *     TreeLinkNode left, right, next;
 *     TreeLinkNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void connect(TreeLinkNode root) {
        Deque<TreeLinkNode> queue = new LinkedList<>();
        queue.offerFirst(root);
        while(!queue.isEmpty()){
            int numOfNodes = queue.size();
            TreeLinkNode pre = null;
            for(int i = 0; i < numOfNodes; i++){
                TreeLinkNode node = queue.pollLast();
                if(node == null) continue;
                queue.offerFirst(node.right);
                queue.offerFirst(node.left);
                node.next = pre;
                pre = node;
            }
        }
    }
}

/**
 * Definition for binary tree with next pointer.
 * public class TreeLinkNode {
 *     int val;
 *     TreeLinkNode left, right, next;
 *     TreeLinkNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void connect(TreeLinkNode root) {
        if(root == null) return;
        TreeLinkNode pre = root;
        TreeLinkNode cur = null;
        while(pre.left != null){
            cur = pre;
            while(cur != null){
                cur.left.next = cur.right;
                if(cur.next != null) cur.right.next = cur.next.left;
                cur = cur.next;
            }
            pre = pre.left;
        }
    }
}

