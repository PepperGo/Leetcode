class Solution {
    public int numSquares(int n) {
        int[] dp = new int[n+1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0; dp[1] = 1;
        for(int i = 1; i <= n; i++){
            for(int j = 1; j*j <= i; j++){
                dp[i] = Math.min(dp[i], dp[i-j*j]+1);
            }
        }
        return dp[n];
    }
}

class Solution {
    public int numSquares(int n) {
	    int[] count = new int[n+1];
		Arrays.fill(count, Integer.MAX_VALUE);
		count[0] = 0;
		for(int i = 1; i < n + 1; i++){
		     int min = Integer.MAX_VALUE;
		     for(int j = 1; j * j <= i ; j++){
			     min = Math.min(min, 1 + count[i - j*j]);
			 }
			 count[i] = min;	
		}
        return count[n];
    }
}


class Solution {
    public int numSquares(int n) {
        int[] count = new int[n + 1];
        Arrays.fill(count, Integer.MAX_VALUE);
        count[0] = 0;
        for(int i = 1; i <= n; i++){
            int min = Integer.MAX_VALUE;
            for(int j = 1; j * j <= i; j++){
                count[i] = Math.min(count[i], count[i - j * j] + 1);
            }
        }
        return count[n];
    }
}
