/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 // solution 1: count the number of the nodes in the right or left branch
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        if(k <= count(root.left))
			return kthSmallest(root.left, k);
		else if(k > count(root.left) + 1)
			return kthSmallest(root.right, k - count(root.left) - 1);
		else 
            return root.val;
    }
	
	public int count(TreeNode root){
		if(root == null) 
			return 0;
		else 
			return count(root.left) + count(root.right) + 1;
	}
}

//Solution2: inorder Traversal - Recursive
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
	
	private int value;
	private int count;
	
    public int kthSmallest(TreeNode root, int k) {
        count = k;
		inorderTraversal(root);
		return value;
    }
	
	public void inorderTraversal(TreeNode root){
		if(root.left != null) inorderTraversal(root.left);
		count--;
		if(count == 0){
			value = root.val;
			return;
		}
		if(root.right != null) inorderTraversal(root.right);
	}

}


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    PriorityQueue<TreeNode> queue = new PriorityQueue<>(new Comparator<TreeNode>(){
        public int compare(TreeNode node1, TreeNode node2){
            return node2.val - node1.val;
        }
    });
    public int kthSmallest(TreeNode root, int k) {
        insertIntoQueue(root, k);
        return queue.poll().val;
    }
    
    public void insertIntoQueue(TreeNode node, int k){
        if(node == null) return;
        queue.offer(node);
        if(queue.size() > k)
            queue.poll();
        insertIntoQueue(node.left, k);
        insertIntoQueue(node.right, k);
    }
}

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int count = 0;
    public int num = 0;
    public int kthSmallest(TreeNode root, int k) {
        count = k;
        inorder(root);
        return num;
    }
    
    public void inorder(TreeNode node){
        if(node == null) return;
        inorder(node.left);
        count--;
        if(count == 0){
            num = node.val;
        }
        inorder(node.right);
    }
}


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        int count = countNodes(root.left);
        if(k <= count){
            return kthSmallest(root.left, k);
        }else if(k > count + 1){
            return kthSmallest(root.right, k - count - 1);
        }
        return root.val;
    }
    
    public int countNodes(TreeNode node){
        if(node == null)
            return 0;
        else
            return 1 + countNodes(node.left) + countNodes(node.right);
    }
}
