/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        int length = 0;
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode current = dummy;
        if(head == null) return dummy.next;
        
        while(current.next != null){
            current = current.next;
            length++;
        }
        current.next = head; // form a circle
        int num = k % length;
        int position = length - num;
        
        current = dummy;
        while(position != 0){
            current = current.next;
            position--;
        }
        dummy.next = current.next;
        current.next = null;
        return dummy.next;
        
      //  return new ListNode(position); for test
        
        
        
    }
}



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if(head == null || head.next == null) return head;
        int len = getLength(head);
        int count = len - k % len;
        if(count == len) return head;
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode cur = head;
        ListNode prev = dummy;
        ListNode tail = dummy;
        while(tail.next != null){
            tail = tail.next;
        }
        
        while(count-- > 0){
            prev = prev.next;
            cur = cur.next;
        }
        tail.next = dummy.next;
        dummy.next = cur;
        prev.next = null;
        
        return dummy.next;
    }
    
    public int getLength(ListNode node){
        int len = 0;
        while(node != null){
            node = node.next;
            len++;
        }
        return len;
    }
}


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if(head == null || head.next == null) return head;
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode fast = dummy;
        ListNode slow = dummy;
        int len = 0;
        while(fast.next != null){
            fast = fast.next;
            len++;
        }
        int newK = len - k % len;
        while(newK-- > 0){
            slow = slow.next;
        }
        fast.next = dummy.next;
        dummy.next = slow.next;
        slow.next = null;
        return dummy.next;
        
    }
}
