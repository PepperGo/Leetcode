/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        Queue<TreeNode> toVisit = new LinkedList<>();
        List<List<Integer>> result = new ArrayList<>();
        if(root == null) return result;
        toVisit.offer(root);
        boolean isLeftToRight = true;
        while(!toVisit.isEmpty()){
            int size = toVisit.size();
            List<Integer> level = new ArrayList<>();
            while(size-- > 0){
                TreeNode cur = toVisit.poll();
                if(isLeftToRight){
                    level.add(cur.val);
                }else{
                    level.add(0, cur.val);
                }
                if(cur.left != null)
                    toVisit.offer(cur.left);
                if(cur.right != null)
                    toVisit.offer(cur.right);
            }
            isLeftToRight = !isLeftToRight;
            result.add(level);
        }
        return result;
    }
}

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        getList(result, root, 0);
        return result;
    }
    
    public void getList(List<List<Integer>> result, TreeNode cur, int level){
        if(cur == null) return;
        
        if(result.size() <= level){
            List<Integer> temp = new ArrayList<Integer>();
            result.add(temp);
        }
        
        if(level %2 == 0) result.get(level).add(cur.val);
        else result.get(level).add(0, cur.val);
        
        getList(result, cur.left, level + 1);
        getList(result, cur.right, level + 1);
        
        
        
    }
}

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isLeftToRight = true;
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if(root == null) return result;
        Deque<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while(!queue.isEmpty()){
            int size = queue.size();
            List<Integer> temp = new ArrayList<>();
            if(!isLeftToRight){
                for(int i = 0; i < size; i++){
                    TreeNode node = queue.pollLast();
                    if(node == null) continue;
                    temp.add(node.val);
                    queue.offerFirst(node.right);
                    queue.offerFirst(node.left);
                }
            }else{
                for(int i = 0; i < size; i++){
                    TreeNode node = queue.pollFirst();
                    if(node == null) continue;
                    temp.add(node.val);
                    queue.offerLast(node.left);
                    queue.offerLast(node.right);
                }
            }
            isLeftToRight = !isLeftToRight;
            if(temp.size() != 0)
                result.add(temp);
        }
        return result;
    }
}


