/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {
    
    private String splitChar = ",";
    private String nullChar = "#";

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder();
        buildString(root, sb);
        return sb.toString();
    }
    
    public void buildString(TreeNode node, StringBuilder sb){
        if(node == null){
            sb.append(nullChar).append(splitChar);
            return;
        }
        sb.append(node.val).append(splitChar);
        buildString(node.left, sb);
        buildString(node.right, sb);
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        String[] strs = data.split(splitChar);
        Queue<Integer> allNodes = new LinkedList<>();
        for(String str : strs){
            if(!str.equals(nullChar))
                allNodes.offer(Integer.parseInt(str));
        }
        return getNode(allNodes);
    }
    
    public TreeNode getNode(Queue<Integer> allNodes){
        if(allNodes.isEmpty()) return null;
        TreeNode root = new TreeNode(allNodes.poll());
        Queue<Integer> smallerNodes = new LinkedList<>();
        while(!allNodes.isEmpty() && allNodes.peek() < root.val){
            smallerNodes.offer(allNodes.poll());
        }
        root.left = getNode(smallerNodes);
        root.right = getNode(allNodes);
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));


//https://www.youtube.com/watch?v=GDqVCQcmxgU


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {
    
    private String splitChar = ",";
    //5 [1 2 3 4][6 7 8 9]
    //private int pos = 0;
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        //inorder
        StringBuilder sb = new StringBuilder();
        inorder(sb, root);
        return sb.toString();
    }
    
    public void inorder(StringBuilder sb, TreeNode node){
        if(node == null) return;
        sb.append(node.val).append(splitChar);
        inorder(sb, node.left);
        inorder(sb, node.right);
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data.length() == 0) return null;
        String[] nodes = data.split(splitChar);
        int[] pos = new int[1];
        pos[0] = 0;
        return deserialize(nodes, pos, Integer.MIN_VALUE, Integer.MAX_VALUE);
    }
    
    public TreeNode deserialize(String[] nodes, int[] pos, int min, int max){
        if(pos[0] >= nodes.length) return null;
        int val = Integer.parseInt(nodes[pos[0]]);
        if(val < min || val > max) return null;
        pos[0]++;
        TreeNode curNode = new TreeNode(val);
        curNode.left = deserialize(nodes, pos, min, val);
        curNode.right = deserialize(nodes, pos, val, max);
        return curNode;
    }
    
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));
