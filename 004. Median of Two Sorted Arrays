class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if(nums1.length > nums2.length) return findMedianSortedArrays(nums2, nums1);
        int mid = (nums1.length+nums2.length+1)/2; 
        //C[mid-1] is the median or (C[mid-1] + C[mid])/2 is the median
        int low = 0, high = nums1.length; //[low, high)
        while(low < high){
            int m1 = low+(high-low)/2; //nums1[m1-1] is end
            int m2 = mid-m1; //nums2[m2-1] is end
            if(nums2[m2-1] > nums1[m1]){
                //m1 is too small
                low = m1+1;
            }else{
                high = m1;
            }
        }
        int m1 = low;
        int m2 = mid-low;
        double midLeftValue = 0;
        if(m1 == 0){
            midLeftValue = nums2[m2-1];
        }else if(m2 == 0){
            midLeftValue = nums1[m1-1];
        }else{
            midLeftValue = Math.max(nums1[m1-1], nums2[m2-1]);
        }
        if((nums1.length + nums2.length)%2 == 1){
            return midLeftValue;
        }
        
        double midRightValue = 0;
        if(m1 == nums1.length){
            midRightValue = nums2[m2];
        }else if(m2 == nums2.length){
            midRightValue = nums1[m1];
        }else{
            midRightValue = Math.min(nums1[m1], nums2[m2]);
        }
        return (midLeftValue+midRightValue)/2;
        
        
    }
}


class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if(nums1.length > nums2.length) return findMedianSortedArrays(nums2, nums1);
        int l = 0, r = nums1.length, k = (nums1.length + nums2.length + 1)/2;
        int m = 0, n = 0;
        while(l <= r){
            m = (l + r)/2;
            n = k - m;
            if(m < r && nums1[m] < nums2[n - 1]){
                l = m + 1; // m is too small
            }else if(m > l && nums1[m - 1] > nums2[n]){
                r = m - 1; //m is too big
            }else
                break;
        }
        double kLeftValue = 0;
        //System.out.print(m);
        //System.out.println(":" + (k-m));
        if(m == 0)
            kLeftValue = nums2[k - m - 1];
        else if(k - m == 0)
            kLeftValue = nums1[m - 1];
        else
            kLeftValue = Math.max(nums1[m - 1], nums2[k - m - 1]);
        if((nums1.length + nums2.length) % 2 == 1) return kLeftValue;
            
        int kRightValue = 0;
        if(m == nums1.length)
            kRightValue = nums2[n];
        else if(n == nums2.length)
            kRightValue = nums1[m];
        else
            kRightValue = Math.min(nums1[m], nums2[n]);
        return (kLeftValue+kRightValue)/2;
    }
}


//O(n^2)
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int[] array = new int[nums1.length + nums2.length];
        int i = 0, j = 0;
        for(int index = 0; index < nums1.length + nums2.length; index++){
            if(i >= nums1.length)
                array[index] = nums2[j++];
            else if(j >= nums2.length)
                array[index] = nums1[i++];
            else if(nums1[i] > nums2[j])
                array[index] = nums2[j++];
            else
                array[index] = nums1[i++];
        }
        if(array.length % 2 == 0)
            return (double) (array[array.length/2 - 1] + array[array.length/2])/2;
        else
            return (double) (array[array.length/2]);
    }
}
