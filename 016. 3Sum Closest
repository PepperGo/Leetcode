class Solution {
    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);
        int distance = Integer.MAX_VALUE;
        int closeSum = Integer.MAX_VALUE;
        for(int i = 0; i < nums.length-2; i++){
            int low = i+1;
            int high = nums.length-1;
            while(low < high){
                int sum = nums[i]+nums[low]+nums[high];
                if(sum > target){
                    high--;
                }else if(sum < target){
                    low++;
                }else{
                    return target;
                }
                if(distance > Math.abs(sum-target)){
                    distance = Math.abs(sum - target);
                    closeSum = sum;
                }
            }
        }
        return closeSum;
    }
}

class Solution {
    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);
        int sum = nums[0] + nums[1] + nums[2];
        for(int i = 0; i < nums.length - 2; i++){
            int lo = i + 1, hi = nums.length - 1;
            while(lo < hi){
                int temp = nums[i] + nums[lo] + nums[hi];
                sum = Math.abs(target - sum) > Math.abs(target - temp) ? temp : sum; 
                if(temp == target) return temp;
                else if(temp > target) hi--;
                else if(temp < target) lo++;
            }          
        }
        return sum;
    }
}


class Solution {
    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);
        int result = nums[0] + nums[1] + nums[nums.length - 1];
        for(int i = 0; i < nums.length; i++){
            int left = i + 1, right = nums.length - 1;
            while(left < right){
                int sum = nums[i] + nums[left] + nums[right];
                if( sum == target) 
                    return target;
                else if(nums[i] + nums[left] + nums[right] < target)
                    left++;
                else if(nums[i] + nums[left] + nums[right] > target)
                    right--;
                result = Math.abs(result - target) > Math.abs(sum - target) ? sum : result;
            }
        }
        return result;
    }
}
