/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

public class BSTIterator {
    private Stack<TreeNode> stack;

    public BSTIterator(TreeNode root) {
        stack = new Stack<TreeNode>();
        pushAll(root);
    }

    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        return !stack.isEmpty();
    }

    /** @return the next smallest number */
    public int next() {
        TreeNode small = stack.pop();
        pushAll(small.right);
        return small.val;
    }
    
    public void pushAll(TreeNode root){
        for( ; root != null; root = root.left){
            stack.push(root);
        }
    }
}

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class BSTIterator {
    Queue<Integer> nodes;
    public BSTIterator(TreeNode root) {
        //inorder
        nodes = new LinkedList<>();
        inorder(nodes, root);
    }
    
    public void inorder(Queue<Integer> result, TreeNode node){
        if(node == null) return;
        inorder(result, node.left);
        result.offer(node.val);
        inorder(result, node.right);
    }
    
    /** @return the next smallest number */
    public int next() {
        return nodes.poll();
    }
    
    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        return !nodes.isEmpty();
    }
}

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator obj = new BSTIterator(root);
 * int param_1 = obj.next();
 * boolean param_2 = obj.hasNext();
 */

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = new BSTIterator(root);
 * while (i.hasNext()) v[f()] = i.next();
 */

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

public class BSTIterator {
    private Stack<TreeNode> container = new Stack<>();

    public BSTIterator(TreeNode root) {
        pushAll(root);
    }

    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        return !container.isEmpty();
    }

    /** @return the next smallest number */
    public int next() {
        TreeNode smallest = container.pop();
        pushAll(smallest.right);
        return smallest.val;
    }
    
    private void pushAll(TreeNode node){
        while(node != null){
            container.push(node);
            node = node.left;
        }
    }
}

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = new BSTIterator(root);
 * while (i.hasNext()) v[f()] = i.next();
 */
