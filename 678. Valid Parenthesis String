class Solution {
    private int n;
    public boolean checkValidString(String s) {
        if(s == null || s.length() == 0) return true;
        n = s.length();
        //dp[i][j]: string.substring(i, j+1) is a valid string
        boolean[][] dp = new boolean[n][n];
        for(int i = 0; i < s.length(); i++){
            if(s.charAt(i) == '*') dp[i][i] = true;
        }
        
        for(int len = 2; len <= n; len++){
            for(int i = 0; i + len <= n; i++){
                int j = i+len-1;
                //case 1:
                if((s.charAt(i) == '*' || s.charAt(i) == '(')
                   && (s.charAt(j) == '*' || s.charAt(j) == ')')){
                    if(len == 2 || dp[i+1][j-1]){
                        dp[i][j] = true;
                        continue;
                    }
                }
                //case2 : find a separate point
                for(int k = i; k < j; k++){
                    if(dp[i][k] && dp[k+1][j]){
                        dp[i][j] = true;
                        break;
                    }
                }  
            }
        }
        return dp[0][n-1];
    }
}


class Solution {
    public boolean checkValidString(String s) {
        int min_op = 0, max_op = 0;
        for(char ch : s.toCharArray()){
            min_op += ch == '(' ? 1 : -1;
            max_op += ch != ')' ? 1 : -1;
            if(max_op < 0) return false;
            min_op = Math.max(min_op, 0);
        }
        return min_op == 0;
    }
}
