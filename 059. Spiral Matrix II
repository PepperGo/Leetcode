public class Solution {
    public int[][] generateMatrix(int n) {
        int[][] matrix = new int[n][n];
        if(n == 0) return matrix;
        int num = 1;
        int startrow = 0; //move to left
        int startcol = 0; //move to down
        int endrow = n -1; 
        int endcol = n -1;
        while(num <= n*n){
            for(int j = startrow; j <= endrow; j++){ //move to right
                matrix[startcol][j] = num++;
            }
            startcol++;
            
            for(int i = startcol; i <= endcol; i++){ //move to down
                matrix[i][endrow] = num++;
            }
            endrow--;
            
            for(int j = endrow; j >= startrow; j--){ // move to left
                matrix[endcol][j] = num++;
            }
            endcol--;
            
            for(int i = endcol; i >= startcol; i--){  // move to up
                matrix[i][startrow] = num++;
            }
            startrow++;

        }
        
        return matrix;
    }
}

class Solution {
    public int[][] generateMatrix(int n) {
        int leftCol = 0, topRow = 0, rightCol = n - 1, botRow = n - 1;
        int[][] result = new int[n][n];
        int count = 1;
        while(leftCol <= rightCol && topRow <= botRow){
            for(int i = leftCol; i <= rightCol; i++, count++){
                result[topRow][i] = count;
            }
            topRow++;
            
            for(int j = topRow; j <= botRow; j++, count++){
                result[j][rightCol] = count;
            }
            rightCol--;
            
            if(topRow <= botRow){
                for(int i = rightCol; i >= leftCol; i--, count++){
                    result[botRow][i] = count;
                }
                botRow--;
            }
            
            if(rightCol >= leftCol){
                for(int j = botRow; j >= topRow; j--, count++){
                    result[j][leftCol] = count;
                }
                leftCol++;
            }   
        }
        return result;
    }
}
