public class WordDictionary {
    private TrieNode root;

    /** Initialize your data structure here. */
    public WordDictionary() {
        root = new TrieNode();
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {
        TrieNode node = root;
        for(int i = 0; i < word.length(); i++){
            char ch = word.charAt(i);
            if(node.containsKey(ch))
                 node = node.getNode(ch);
            else
                 node.putKey(ch, new TrieNode());
        }
        node.setEnd();
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    
 /*    public boolean search(String word) {
        TrieNode node = searchNode(word);
        return node != null && node.isEnd();
    }
    
    public TrieNode searchNode(String word){
        TrieNode node = root;
        for(int i = 0; i < word.length(); i++){
            char currentChar = word.charAt(i);
            if(currentChar != '.'){
                if(node.containsKey(currentChar))
                   node = node.getNode(currentChar);
                else
                   return null;
            }
            else{
                if(node )
            }
        }
        return node;
    }
    */
    //Guess backtrack is needed. Ill fix it tomorrow
    
}

class TrieNode{
    private TrieNode[] children;
    private final int R = 26;
    private char val;
    private boolean isEnd;
    
    TrieNode(){
        children = new TrieNode[R];
        isEnd = false;
    }
    
    TrieNode(char val){
        this();
        this.val = val;
    }
    
    public void containsKey(char ch){
        return children[ch - 'a'] != null;
    }
    
    public TrieNode getNode(char ch){
        return children[ch - 'a'];
    }
    
    public void putKey(char ch, TrieNode node){
        children[ch - 'a'] = node;
    }
    
    public void setEnd(){
        isEnd = true;
    }
    
    public boolean isEnd(){
        return isEnd;
    }
    
    
}

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */
