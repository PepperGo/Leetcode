class Solution {
    public int orangesRotting(int[][] grid) {
        if(grid == null || grid.length == 0) return 0;
        Queue<Cell> queue = new LinkedList<>();
        int freshCount = 0;
        for (int i = 0; i < grid.length; i ++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == 2) {
                    queue.add(new Cell(i, j));
                } else if (grid[i][j] == 1) {
                    freshCount++;
                }
            }
        }
        if(freshCount == 0) return 0;
        int steps = 0;
        int[][] dirs = {{1,0},{-1,0},{0,1},{0,-1}};
        while(!queue.isEmpty()) {
            steps++;
            int size = queue.size();
            for(int i = 0; i < size; i++) {
                Cell cur = queue.poll();
                for(int[] dir : dirs) {
                    int newX = cur.x + dir[0];
                    int newY = cur.y + dir[1];
                    if (newX < 0 || newX >= grid.length || newY < 0 || newY >= grid[0].length) {
                        continue;
                    }
                    if(grid[newX][newY] == 1) {
                        grid[newX][newY] = 2;
                        queue.add(new Cell(newX, newY));
                    }
                }
            }   
        }
        for(int i = 0; i < grid.length; i++) {
            for(int j = 0; j < grid[0].length; j++) {
                if(grid[i][j] == 1) {
                    return -1;
                }
            }
        }
        return steps-1;
        
        
    }
}

class Cell{
    int x;
    int y;
    
    public Cell(int x, int y) {
        this.x = x;
        this.y = y;
    }
}