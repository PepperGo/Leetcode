class SnakeGame {

    /** Initialize your data structure here.
        @param width - screen width
        @param height - screen height 
        @param food - A list of food positions
        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]. */
    private int R, L;
    private int score;
    Deque<int[]> body;
    private int foodIndex;
    private int[][] food;
    Set<Integer> isBody;
    private int curX, curY; //haed
    public SnakeGame(int width, int height, int[][] food) {
        R = height;
        L = width;
        foodIndex = 0;
        this.food = food;
        body = new LinkedList<>();
        score = 0;
        isBody = new HashSet<>();
        isBody.add(0);
        curX = 0;
        curY = 0;
        body.offerFirst(new int[]{curX, curY});
    }
    
    /** Moves the snake.
        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down 
        @return The game's score after the move. Return -1 if game over. 
        Game over when snake crosses the screen boundary or bites its body. */
    public int move(String direction) {
        if(score == -1)
            return score;
        if(direction.equals("U")){
            curX--;
        }else if(direction.equals("D")){
            curX++;
        }else if(direction.equals("L")){
            curY--;
        }else{
            curY++;
        }
        int[] head = new int[]{curX, curY};
        int[] tail = body.peekLast();
        isBody.remove(tail[0]*L + tail[1]); //remove temporarily
        //case 1, out boundary // eat tail
        if(curX < 0 || curX >= R || curY < 0 || curY >= L ||
           isBody.contains(head[0]*L + head[1])){
            score = -1;
            return score;
        }
        
        isBody.add(head[0]*L + head[1]);
        body.offerFirst(head);
        //case 3, eat food
        if(foodIndex < food.length && curX == food[foodIndex][0] && curY == food[foodIndex][1]){
            tail = body.peekLast(); 
            isBody.add(tail[0]*L + tail[1]);   
            foodIndex++;
            return ++score;
        }
        //case 4: normal move
        body.pollLast();
        return score;
    }
}

/**
 * Your SnakeGame object will be instantiated and called as such:
 * SnakeGame obj = new SnakeGame(width, height, food);
 * int param_1 = obj.move(direction);
 */
