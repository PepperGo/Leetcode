public class Solution {
    public int evalRPN(String[] tokens) {
        int a, b;
        Stack<Integer> result = new Stack<Integer>();
        for(String s : tokens){
            if(s.equals("+")){
                result.push(result.pop() + result.pop());
            }else if(s.equals("-")){
                a = result.pop();
                b = result.pop();
                result.push(b - a);
            }else if(s.equals("/")){
                a = result.pop();
                b = result.pop();
                result.push(b / a);
            }else if(s.equals("*")){
                result.push(result.pop() * result.pop());
            }else{
                result.push(Integer.parseInt(s));
            }
        }
        return result.pop();
    }
}

class Solution {
    public int evalRPN(String[] tokens) {
        Stack<Integer> numbers = new Stack<>();
        for(String str : tokens){
            int n1, n2;
            if(str.equals("+")){
                n1 = numbers.pop();
                n2 = numbers.pop();
                numbers.push(n1 + n2);
            }else if(str.equals("-")){   
                n1 = numbers.pop();
                n2 = numbers.pop();
                numbers.push(n2 - n1);
            }else if(str.equals("*")){
                n1 = numbers.pop();
                n2 = numbers.pop();
                numbers.push(n1 * n2);
            }else if(str.equals("/")){
                n1 = numbers.pop();
                n2 = numbers.pop();
                numbers.push(n2/n1);
            }else{
                numbers.push(Integer.parseInt(str));
            }
        }
        return numbers.pop();
    }
}
