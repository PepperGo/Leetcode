class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int high = m+n-1;
        int n1 = m-1, n2 = n-1;
        while(n1 >= 0 || n2 >= 0){
            if(n2 < 0){
                return;
            }else if(n1 < 0){
                nums1[high--] = nums2[n2--];
            }else if(nums1[n1] > nums2[n2]){
                nums1[high--] = nums1[n1--];
            }else{
                nums1[high--] = nums2[n2--];
            }
        }
    }
}

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int high = m+n-1;
        int n1 = m-1, n2 = n-1;
        for(int i = high; i >= 0; i--){
            if(n1 < 0){
                nums1[i] = nums2[n2--];
            }else if(n2 < 0){
                nums1[i] = nums1[n1--];
                //can just break
            }else if(nums1[n1] > nums2[n2]){
                nums1[i] = nums1[n1--];
            }else{
                nums1[i] = nums2[n2--];
            }
        }
    }
}


public class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int i = m - 1;
        int j = n - 1;
        int k = m + n - 1;
        
        while(i >= 0 && j >= 0){
            if(nums1[i] > nums2[j]){
                nums1[k--] = nums1[i--];
            }
            else{
                nums1[k--] = nums2[j--];
            }
        }
        while(j >= 0) nums1[k--] = nums2[j--];
        
    }
}


class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int k = nums1.length - 1;
        while(k  >= 0){
            if(m < 1){
                nums1[k--] = nums2[n - 1];
                n--;
            }else if(n < 1){
                nums1[k--] = nums1[m - 1]; 
                m--;
            }else if(nums1[m - 1] > nums2[n - 1]){
                nums1[k--] = nums1[m - 1];
                m--;
            }else {
                nums1[k--] = nums2[n - 1];
                n--;
            }
        }
    }
}
