class Solution {
    public double myPow(double x, int n) {
        if(n == 0)
            return 1;
        if(n == Integer.MIN_VALUE){
            return myPow(x*x, n/2);
        }
        if(n < 0){
            x = 1/x;
            n = -n;
        }
        if(n%2 == 1) 
            return myPow(x*x, n/2)*x;
        else
            return myPow(x*x, n/2);
    }
}

class Solution {
    public double myPow(double x, int n) {
        long N = n;
        if (N < 0) {
            x = 1 / x;
            N = -N;
        }
        double ans = 1;
        for (long i = 0; i < N; i++)
            ans = ans * x;
        return ans;
    }
}
Time Limit
Time complexity : O(n). We will multiply x for n times.
Space complexity : O(1). We only need one variable to store the final product of x. 


class Solution {
    public double myPow(double x, int n) {
        long N = n;
        if(N < 0){
            x = 1/x;
            N = -N;
        }
        return power2(x, N);
    }
    
    public double power2(double x, long n){
        if(n == 0)
            return 1.0;
        double half = power2(x, n/2);
        if(n%2 == 0){
            return half * half;
        }else{
            return half * half * x;
        }
    }
}

Time complexity : O(log(n))
Space complexity : O(log(n))


class Solution {
    public double myPow(double x, int n) {
        long N = n;
        if(N < 0){
            x = 1/x;
            N = -N;
        }
        double ans = 1;
        double cur = x;
        for(long i = N; i > 0; i /= 2){
            if(i % 2 == 1)
                ans *= cur;
            cur *= cur;
        }
        return ans;
    }
}

Time complexity : O(log(n))
Space complexity : O(1)


public class Solution {
    public double myPow(double x, int n) {
        if(x == 1) return 1;
        if(x!=-1 && n == Integer.MIN_VALUE) return 0;
        if(x == -1 && n == Integer.MIN_VALUE) return 1;
        if(n == 0) return 1;
        if(n == 1) return x;
        if(n < 0){
            n = -n;
            x = 1/x;
        }
        return n%2==0 ? myPow(x*x, n/2):x*myPow(x*x, n/2);
    }
}
