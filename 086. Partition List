class Solution {
    public ListNode partition(ListNode head, int x) {
        ListNode smaller = new ListNode(0);
        ListNode larger = new ListNode(0);
        ListNode curS = smaller;
        ListNode curL = larger;
        ListNode cur = head;
        while(cur != null){
            if(cur.val < x){
                curS.next = cur;
                curS = curS.next;
            }else{
                curL.next = cur;
                curL = curL.next;
            }
            cur = cur.next;
        }
        curL.next = null;
        curS.next = larger.next;
        return smaller.next;
    }
}


public class Solution {
    public ListNode partition(ListNode head, int x) {
	   if(head == null || head.next == null) return head;
	   ListNode dump  =  new ListNode(0);
	   dump.next = head;
	   ListNode front = dump;
	   while(front.next != null){
	       if(front.next.val < x){
		        front = front.next;
		   }else{
		        ListNode target = front;
				while(target.next != null && target.next.val >= x){
				   target = target.next;
				}
				if(target.next == null) break;
				
				ListNode move = target.next;
				target.next = move.next;
				move.next = front.next;
				front.next = move;
				front = front.next;
		   }   
	   } 
	   return dump.next;
  }
}

/* interesting idea, if the memory doesn't matter

the basic idea is to maintain two queues, 
the first one stores all nodes with val less than x , 
and the second queue stores all the rest nodes. 
Then concat these two queues. Remember to set the tail of second queue a null next, or u will get TLE.

public ListNode partition(ListNode head, int x) {
    ListNode dummy1 = new ListNode(0), dummy2 = new ListNode(0);  //dummy heads of the 1st and 2nd queues
    ListNode curr1 = dummy1, curr2 = dummy2;      //current tails of the two queues;
    while (head!=null){
        if (head.val<x) {
            curr1.next = head;
            curr1 = head;
        }else {
            curr2.next = head;
            curr2 = head;
        }
        head = head.next;
    }
    curr2.next = null;          //important! avoid cycle in linked list. otherwise u will get TLE.
    curr1.next = dummy2.next;
    return dummy1.next;
}


*/


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode partition(ListNode head, int x) {
        ListNode left = new ListNode(0);
        ListNode right = new ListNode(0);
        ListNode cur = head, leftCur = left, rightCur = right;
        while(cur != null){
            if(cur.val < x){
                leftCur.next = cur;
                leftCur = leftCur.next;
            }else{
                rightCur.next = cur;
                rightCur = rightCur.next;
            }
            cur = cur.next;
        }
        leftCur.next = right.next;
        rightCur.next = null;
        return left.next;
    }
}
