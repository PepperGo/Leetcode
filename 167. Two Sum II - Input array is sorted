class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int low = 0, high = numbers.length-1;
        while(low < high){
            int sum = numbers[low] + numbers[high];
            if(sum > target){
                high--;
            }else if(sum < target){
                low++;
            }else{
                return new int[]{low+1, high+1};
            }
        }
        throw new IllegalArgumentException("no such array");
    }
}



public class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int start = 0;
        int end = numbers.length - 1;
        while(numbers[start] + numbers[end] != target){
            if(numbers[start] + numbers[end] < target)
                start++;
            else
                end--;
        }
        return new int[] {start+1, end+1};
    }
}

class Solution {
    public int[] twoSum(int[] numbers, int target) {
        HashMap<Integer, Integer> hashMap = new HashMap<>();
        for(int i = 0; i < numbers.length; i++){
            if(hashMap.containsKey(target - numbers[i])){
                return new int[]{hashMap.get(target - numbers[i]), i + 1};
            }else
                hashMap.put(numbers[i], i + 1);
        }
        throw new IllegalArgumentException("No two sum solution");
    }
}
