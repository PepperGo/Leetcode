public class Solution {
    public int arrayPairSum(int[] nums) {
        Arrays.sort(nums);
        int result = 0;
        for(int i = 0; i < nums.length; i += 2){
            result += nums[i];
        }
        return result;
    }
}


class Solution {
    public int arrayPairSum(int[] nums) {
        Arrays.sort(nums);
        int sum = 0;
        for(int i = 0; i < nums.length; i = i + 2){
            sum += nums[i];
        }
        return sum;
    }
}
Time complexity : O(nlog(n)). Sorting takes O\big(nlog(n)\big)O(nlog(n)) time. We iterate over the array only once.
Space complexity : O(1). Constant extra space is used.

class Solution {
    public int arrayPairSum(int[] nums) {
        int[] bucket = new int[20001];
        for(int num : nums){
            bucket[num + 10000]++;
        }
        int sum = 0;
        boolean odd = true;
        for(int i = 0; i < bucket.length; i++){
            while(bucket[i] > 0){
                if(odd){
                    sum += i - 10000;
                }
                odd = !odd;
                bucket[i]--;
            }
        }
        return sum;   
    }
}
Time complexity : O(n). The whole hashmap arrarr of size nn is traversed only once.

Space complexity : O(n). A hashmap arrarr of size nn is used.
