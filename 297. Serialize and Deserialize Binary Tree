/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {
    private String seperator = ",";
    private String nullSymbol = "#";
    
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder();
        inorder(root, sb);
        return sb.toString();
    }
    
    public void inorder(TreeNode node, StringBuilder sb){
        if(node == null){
            sb.append(nullSymbol).append(seperator);
            return;
        }
        sb.append(node.val).append(seperator);
        inorder(node.left, sb);
        inorder(node.right, sb);
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        String[] nodes = data.split(seperator);
        int[] pos = new int[1];
        pos[0] = 0;
        return buildTree(nodes, pos);
    }
    
    public TreeNode buildTree(String[] nodes, int[] pos){
        if(pos[0] == nodes.length) return null;
        if(nodes[pos[0]].equals(nullSymbol)){
            pos[0]++;
            return null;
        }
        int value = Integer.parseInt(nodes[pos[0]]);
        TreeNode node = new TreeNode(value);
        pos[0]++;
        node.left = buildTree(nodes, pos);
        node.right = buildTree(nodes, pos);
        return node;
    }
    
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {
    
    private String splitSymbol = ",";
    //private static final String splitSymbol = ",";
    
    private String nullNodeSymbol = "#";
    //private static final String nullNodeSymbol = "#";
    
    
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder();
        buildString(root, sb);
        return sb.toString();
    }
    
    public void buildString(TreeNode node, StringBuilder sb){
        if(node == null)
            sb.append(nullNodeSymbol + splitSymbol);
        else{
            sb.append(node.val + splitSymbol);
            buildString(node.left, sb);
            buildString(node.right, sb);
        }
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        Deque<String> nodes = new LinkedList<>(Arrays.asList(data.split(splitSymbol)));
        return translateString(nodes);
    }
    
    public TreeNode translateString(Deque<String> nodes){
        String value = nodes.remove();
        TreeNode node = null;
        if(!value.equals(nullNodeSymbol))
            node = new TreeNode(Integer.parseInt(value));
        else
            return node;
        if(!nodes.isEmpty()){
            node.left = translateString(nodes);
            node.right = translateString(nodes);
        }
        return node;
        
        /*
        String val = nodes.remove();
        if (val.equals(NN)) return null;
        else {
            TreeNode node = new TreeNode(Integer.valueOf(val));
            node.left = buildTree(nodes);
            node.right = buildTree(nodes);
            return node;
        }
        */
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));

