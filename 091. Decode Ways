public class Solution {
    public int numDecodings(String s) {
        int n = s.length();
        if(n == 0) return 0;
        int[] result = new int[n + 1];
        result[n] = 1;
        result[n - 1] = s.charAt(n - 1) != '0' ? 1 : 0;
        
        for(int i = n - 2; i >= 0; i--){
            if(s.charAt(i) == '0') 
               continue;
            else
               result[i] = Integer.parseInt(s.substring(i,i+2)) <= 26 ? result[i + 1] + result[i + 2] : result[i + 1];
        }
        return result[0];
    }
}


class Solution {
    public int numDecodings(String s) {
        int[] dp = new int[s.length() + 1];
        //dp[i] means the possible number of decodings at left of index i
        dp[0] = 1;
        dp[1] = (s.charAt(0) != '0' ? 1 : 0);
        for(int i = 2; i < dp.length; i++){
            char single = s.charAt(i - 1);
            String doubleStr = s.substring(i - 2, i);
            if(single > '0' && single <= '9'){
                dp[i] += dp[i - 1];
            }
            if(Integer.parseInt(doubleStr) >= 10 && Integer.parseInt(doubleStr) <= 26){
                dp[i] += dp[i - 2];
            }
        }
        return dp[dp.length - 1];
    }
}
