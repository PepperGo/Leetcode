class Solution {
    private int R, L;
    public int minPathSum(int[][] grid) {
        R = grid.length;
        L = grid[0].length;
        int[][] distance = new int[R+1][L+1];
        for(int[] dis : distance){
            Arrays.fill(dis, Integer.MAX_VALUE);
        }
        distance[R-1][L] = 0;
        distance[R][L-1] = 0;
        for(int i = R-1; i >= 0; i--){
            for(int j = L-1; j >= 0; j--){
                distance[i][j] = Math.min(distance[i+1][j], distance[i][j+1]) + grid[i][j];
            }
        }
        return distance[0][0];
    }
}


public class Solution {
    public int minPathSum(int[][] grid) {
        int m = grid.length;
		int n = grid[0].length;
		int[][] result = new int[m][n];
                result[0][0] = grid[0][0];
		
		for(int i = 1; i < m; i++){
		     result[i][0] = result[i - 1][0] + grid[i][0];
		}
		
		for(int j = 1; j < n; j++){
		     result[0][j] = result[0][j - 1] + grid[0][j];
		
		}

		for(int i = 1; i < m; i++){
		    for(int j = 1; j < n; j++){
			    result[i][j] = Math.min(result[i - 1][j],result[i][j - 1]) + grid[i][j];
			}		
		}
		
		return result[m - 1][n - 1];
    }
}


class Solution {
    public int minPathSum(int[][] grid) {
        int[] dis = new int[grid[0].length];
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[0].length; j++){
                if(i == 0 && j == 0){
                    dis[0] = grid[0][0];
                }else if(i == 0){
                    dis[j] = dis[j - 1] + grid[i][j];
                }else if(j == 0){
                    dis[j] = dis[j] + grid[i][j];
                }else{
                    dis[j] = Math.min(dis[j], dis[j - 1]) + grid[i][j];
                }
            }
        }
        return dis[dis.length - 1];
    }
}
