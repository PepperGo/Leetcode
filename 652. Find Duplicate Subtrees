/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    HashMap<String, Integer> hashMap = new HashMap<>();
    List<TreeNode> result = new ArrayList<>();
    public List<TreeNode> findDuplicateSubtrees(TreeNode root) {
        if(root == null) return result;
        preOrder(root);
        return result;
    }
    
    public String preOrder(TreeNode node){
        if(node == null) return "";
        String str = node.val + "," + preOrder(node.left) + "," + preOrder(node.right);
        if(hashMap.containsKey(str)){
            int count = hashMap.get(str);
            if(count == 1) result.add(node);
            hashMap.put(str, count + 1);
        }else{
            hashMap.put(str, 1);
        }
        return str;
    }
}

/*
   count.put(serial, count.getOrDefault(serial, 0) + 1);
        if (count.get(serial) == 2)
            ans.add(node);
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
//http://zxi.mytechroad.com/blog/tree/leetcode-652-find-duplicate-subtrees/
    public List<TreeNode> findDuplicateSubtrees(TreeNode root) {
       
        //key: id for subtress, value: number of occur
        HashMap<Long, int[]> counts = new HashMap<>();
        List<TreeNode> result = new ArrayList<>();
        if(root == null) return result;
        getId(result, counts, root);
        return result;
    }
    
    public int getId(List<TreeNode> result, HashMap<Long, int[]> counts, TreeNode node){
        if(node == null) return 0;
        long uid = ((long)node.val) << 32 | getId(result, counts, node.left) << 16 | getId(result, counts, node.right);
        int[] idAndCounts = counts.get(uid);
        if(idAndCounts == null){
            idAndCounts = new int[]{counts.size() + 1, 1};
            counts.put(uid, idAndCounts);
        }else{
            if(++idAndCounts[1] == 2){
                result.add(node);
            }
        }
        return idAndCounts[0];
    }
}
