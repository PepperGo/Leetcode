class Solution {
    //DFS Topological Sorting
    Stack<Character> stack = new Stack<>();
    public String alienOrder(String[] words) {
        ArrayList<Character>[] graph = new ArrayList[26];
        for(int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<>();
        }
        // -1: not existed 0: unvisited 1: visiting 2: visited
        int[] status = new int[26]; 
        Arrays.fill(status, -1);
        for(String str : words) {
            for(int i = 0; i < str.length(); i++) {
                status[str.charAt(i)-'a'] = 0;
            }
        }
        
        for (int i = 0; i < words.length-1; i++) {
            String word1 = words[i];
            String word2 = words[i+1];
            for (int j = 0; j < Math.min(word1.length(), word2.length()); j++) {
                if (word1.length() > word2.length() && word1.startsWith(word2)) {
                    return "";
                }
                if (word1.charAt(j) != word2.charAt(j)) {
                    graph[word1.charAt(j) - 'a'].add(word2.charAt(j));
                    break;
                }
            }
        }
        
        for (int i = 0; i < 26; i++) {
            if (status[i] == 0) {
                char ch = (char) (i+'a');
                if(!topologicalSort(ch, status, graph)) {
                    return "";            
                }
            }
        }
        
        String result = "";
        while(!stack.isEmpty()) {
            result = result + stack.pop();
        }
        return result;
        
    }
    
    private boolean topologicalSort(char ch, int[] status, ArrayList<Character>[] graph) {
        status[ch-'a'] = 1;
        for(char next : graph[ch-'a']) {
            if (status[next-'a'] == 1) return false;
            if (status[next-'a'] == 0) {
                if(!topologicalSort(next, status, graph)) {
                    return false;
                }
            }
        }
        status[ch-'a'] = 2;
        stack.push(ch);
        return true;
    }
}

//BFS degrees

class Solution {
    public String alienOrder(String[] words) {
        // -1: not existed, 0: 0 degree
        int[] degree = new int[26];
        ArrayList<Character>[] graph = new ArrayList[26];
        for(int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<>();
        }
        Arrays.fill(degree, -1);
        for(String str : words) {
            for(int i = 0; i < str.length(); i++) {
                degree[str.charAt(i)-'a'] = 0;
            }
        }
        
        for (int i = 0; i < words.length-1; i++) {
            String word1 = words[i];
            String word2 = words[i+1];
            for (int j = 0; j < Math.min(word1.length(), word2.length()); j++) {
                if (word1.length() > word2.length() && word1.startsWith(word2)) {
                    return "";
                }
                if (word1.charAt(j) != word2.charAt(j)) {
                    graph[word1.charAt(j) - 'a'].add(word2.charAt(j));
                    degree[word2.charAt(j) - 'a']++;
                    break;
                }
            }
        }
        
        Queue<Character> queue = new LinkedList<>();
        for(int i = 0; i < 26; i++) {
            if (degree[i] == 0) {
                queue.add((char) (i+'a'));
            }
        }
        String result = "";
        while(!queue.isEmpty()) {
            char ch = queue.poll();
            result = result + ch;
            for(char next : graph[ch-'a']) {
                degree[next-'a']--;
                if(degree[next -'a'] == 0) {
                    queue.add(next);
                }
            }
        }
        for(int rest : degree) {
            if (rest != 0 && rest != -1) {
                return "";
            }
        }
        return result;
    }
}



class Solution {
    public String alienOrder(String[] words) {
        Map<Character, Set<Character>> graph = new HashMap<>();
        Map<Character, Integer> inDegree = new HashMap<>();
        for(String word : words){
            for(int i = 0; i < word.length(); i++){
                char ch = word.charAt(i);
                graph.putIfAbsent(ch, new HashSet<Character>());
                inDegree.putIfAbsent(ch, 0);
            }
        }
        
        //build graph, and indegree
        for(int level = 0; level < words.length-1; level++){
            String str1 = words[level];
            String str2 = words[level+1];
            for(int i = 0; i < Math.min(str1.length(), str2.length()); i++){
                char ch1 = str1.charAt(i);
                char ch2 = str2.charAt(i);
                if(ch1 != ch2){
                    Set set = graph.get(ch1);
                    if(!set.contains(ch2)){
                        set.add(ch2);
                        inDegree.put(ch2, inDegree.get(ch2)+1);
                    }
                    break;
                }
            }
        }
        Queue<Character> queue = new LinkedList<>();
        for(Map.Entry<Character, Integer> entry : inDegree.entrySet()){
            if(entry.getValue() == 0)
                queue.offer(entry.getKey());
        }
        StringBuilder sb = new StringBuilder();
        while(!queue.isEmpty()){
            char cur = queue.poll();
            sb.append(cur);
            for(char ch : graph.get(cur)){
                int count = inDegree.get(ch)-1;
                inDegree.put(ch, inDegree.get(ch)-1);
                if(count == 0)
                    queue.offer(ch);
            }
        }
        return sb.toString().length() == graph.size() ? sb.toString() : "";
        
    }
}
