class Solution {
    private int R, L;
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0)
            return false;
        R = matrix.length;
        L = matrix[0].length;
        int r = R-1, l = 0;
        while(r >= 0 && l < L){
            if(matrix[r][l] < target){
                l++;
            }else if(matrix[r][l] > target){
                r--;
            }else
                return true;
        }
        return false;
    }
}


class Solution {
    private int R, L;
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0)
            return false;
        R = matrix.length;
        L = matrix[0].length;
        int low = 0, high = R*L;// [low, high)
        while(low < high){
            int mid = low+(high-low)/2;
            int i = mid/L;
            int j = mid%L;
            System.out.println(i + "-" + j);
            if(matrix[i][j] < target){
                low = mid+1;
            }else{
                high = mid;
            }
        }
        return low < R*L && matrix[low/L][low%L] == target ? true : false;
    }
}

n * m matrix convert to an array => matrix[x][y] => a[x * m + y]

an array convert to n * m matrix => a[x] =>matrix[x / m][x % m];

public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
         int m = matrix.length;
         if(m == 0) return false;
         int n = matrix[0].length;
         
         int start = 0;
         int end = m*n - 1;
         while(end >= start){
              int mid = (start + end)/2;
              int mid_value = matrix[mid/n][mid%n];
              if(mid_value == target)
                 return true;
              else if(mid_value < target)
                  start = mid + 1;
              else if(mid_value > target)
                  end = mid - 1;
         }
         return false;
    }
}


class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0) return false;
        int row = matrix.length - 1;
        int col = 0;
        while(row >= 0 && col < matrix[0].length){
            if(matrix[row][col] == target) 
                return true;
            else if(matrix[row][col] < target)
                col++;
            else
                row--;
        }
        return false;
    }
}
