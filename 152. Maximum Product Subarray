class Solution {
    public int maxProduct(int[] nums) {
        if(nums == null && nums.length == 0) return 0;
        int min = 1, max = 1;
        int result = Integer.MIN_VALUE;
        for(int num : nums){
            int temp = max;
            max = Math.max(Math.max(max*num, min*num), num);
            min = Math.min(Math.min(min*num, temp*num), num);
            if(max > result){
                result = max;
            }
        }
        return result;
    }
}

public class Solution {
    public int maxProduct(int[] nums) {
        if(nums.length == 0) return 0;
        int maxpre = nums[0];
        int minpre = nums[0];
        int maxnow = nums[0];
        int maxhere, minhere;
        
        for(int i = 1; i < nums.length; i++){
            maxhere = Math.max(Math.max(maxpre*nums[i], minpre*nums[i]), nums[i]);
            minhere = Math.min(Math.min(maxpre*nums[i], minpre*nums[i]), nums[i]);
            maxnow = Math.max(maxhere, maxnow);
            maxpre = maxhere;
            minpre = minhere;
        }
        return maxnow;
    }
}


class Solution {
    public int maxProduct(int[] nums) {
        int maxSoFar = 1;
        int minSoFar = 1;
        int maxP = Integer.MIN_VALUE;
        for(int i = 0; i < nums.length; i++){
            int temp1 = maxSoFar * nums[i], temp2 = minSoFar * nums[i];
            maxSoFar = Math.max(nums[i], Math.max(temp1, temp2));
            minSoFar = Math.min(nums[i], Math.min(temp1, temp2));
            maxP = Math.max(maxP, maxSoFar);
        }
        return maxP;
        
    }
}

class Solution {
    public int maxProduct(int[] nums) {
        int result = nums[0];
        for(int i = 1, max = nums[0], min = nums[0]; i < nums.length; i++){
            if(nums[i] < 0){
                int temp = max;
                max = min;
                min = temp;
            }
            max = Math.max(max * nums[i], nums[i]);
            min = Math.min(min * nums[i], nums[i]);
            result = Math.max(max, result);
        }
        return result;
    }
}
