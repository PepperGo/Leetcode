class Solution {
    public int minCostClimbingStairs(int[] cost) {
        int step1 = 0, step2 = 0;
        for(int i = 0; i < cost.length; i++){
            int step0 = Math.min(step1, step2) + cost[i];
            step2 = step1;
            step1 = step0;
        }
        return Math.min(step1, step2);
    }
}

class Solution {
    public int minCostClimbingStairs(int[] cost) {
        int[] dp = new int[cost.length+1];
        dp[0] = 0;
        dp[1] = 0;
        for(int i = 2; i < cost.length+1; i++){
            dp[i] = Math.min(dp[i-2]+cost[i-2], dp[i-1]+cost[i-1]);
        }
        return dp[cost.length];
    }
}

class Solution {
    public int minCostClimbingStairs(int[] cost) {
        int[] toEndStepCost = new int[cost.length];
        toEndStepCost[0] = cost[0];
        toEndStepCost[1] = cost[1];
        
        for(int i = 2; i < cost.length; i++){
            toEndStepCost[i] = cost[i] + Math.min(toEndStepCost[i-1], toEndStepCost[i-2]);
        }
        
        return Math.min(toEndStepCost[cost.length-2], toEndStepCost[cost.length-1]);
    }

}

class Solution {
    public int minCostClimbingStairs(int[] cost) {
        int[] dp = new int[cost.length]; //dp[i]: the cost if jumping from cost[i]
        dp[0] = cost[0];
        dp[1] = cost[1];
        for(int i = 2; i < cost.length; i++){
            dp[i] = Math.min(dp[i - 1], dp[i - 2]) + cost[i];
        }
        return Math.min(dp[dp.length - 1], dp[dp.length -2]);
    }
}

class Solution {
    public int minCostClimbingStairs(int[] cost) {
        for(int i = 2; i < cost.length; i++){
            cost[i] = Math.min(cost[i - 1], cost[i - 2]) + cost[i];
        }
        return Math.min(cost[cost.length - 1], cost[cost.length -2]);
    }
}
