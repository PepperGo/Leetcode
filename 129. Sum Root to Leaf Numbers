class Solution {
    int sum = 0;
    public int sumNumbers(TreeNode root) {
        if(root == null) return sum;
        return traverse(root, 0);
    }
    
    public int traverse(TreeNode node, int num){
        if(node == null){
            return 0;
        }
        num = num*10 + node.val;
        if(node.left == null && node.right == null){
            return num;
        }
        return traverse(node.left, num) + traverse(node.right, num);
    }
}

class Solution {
    int sum = 0;
    public int sumNumbers(TreeNode root) {
        if(root == null) return sum;
        traverse(root, 0);
        return sum;
    }
    
    public void traverse(TreeNode node, int num){
        if(node == null){
            return;
        }
        num = num*10 + node.val;
        if(node.left == null && node.right == null){
            sum += num;
        }
        traverse(node.left, num);
        traverse(node.right, num);
    }
}


public class Solution {
    public int sumNumbers(TreeNode root) {
        return getSum(root,0);
    }
    
    public int getSum(TreeNode root, int sum){
        if(root == null) return 0;
        if(root.left == null && root.right == null) return root.val + sum*10;
        return getSum(root.left, root.val + sum*10) + getSum(root.right, root.val + sum*10);
    }
}


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int sum = 0;
    public int sumNumbers(TreeNode root) {
        dfs(root, new StringBuilder());
        return sum;
    }
    
    public void dfs(TreeNode node, StringBuilder sb){
        if(node == null){
            return;
        }
        sb.append(node.val);
        if(node.left == null && node.right == null){
            sum += Integer.parseInt(sb.toString());
            sb.deleteCharAt(sb.length() - 1);
            return;
        }
        dfs(node.left, sb);
        dfs(node.right, sb);
        sb.deleteCharAt(sb.length() - 1);
    }
}


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int sumNumbers(TreeNode root) {
        return sum(root, 0);
    }
    
    public int sum(TreeNode node, int sum){
        if(node == null) return 0;//not leaves, return 0
        if(node.left == null && node.right == null) return sum * 10 + node.val;
        return sum(node.left, sum * 10 + node.val) + sum(node.right, sum * 10 + node.val);
    }
}
