public class Solution {
    public int lengthOfLongestSubstring(String s) {
        HashSet<Character> answer = new HashSet<Character>();
        int head = 0;
        int tail = 0;
        int length = 0;
        while(tail < s.length()){
            if(!answer.contains(s.charAt(tail))){
                answer.add(s.charAt(tail++));
                length = Math.max(length, tail - head);
            }else{
                answer.remove(s.charAt(head++));
            }
        }
        return length;
    }
}

class Solution {
    public int lengthOfLongestSubstring(String s) {
        HashMap<Character, Integer> freq = new HashMap<>();
        int low = 0, max = 0;
        for(int high = 0; high < s.length(); high++){
            char ch = s.charAt(high);
            int count = freq.getOrDefault(ch, 0)+1;
            freq.put(ch, count);
            while(count > 1){
                char head = s.charAt(low++);
                if(freq.get(head) == 2){
                    count--;
                }
                freq.put(head, freq.get(head)-1);
            }
            max = Math.max(max, high-low+1);
        }
        return max;
    }
}

class Solution {
    public int lengthOfLongestSubstring(String s) {
        if(s.length() < 2) return s.length();
        int max = 0;
        for(int i = 0; i < s.length(); i++){
            StringBuilder str = new StringBuilder();
            str.append(s.charAt(i));
            for(int j = i + 1; j < s.length(); j++){
                if(str.indexOf(s.charAt(j) + "") == -1)
                    str.append(s.charAt(j));
                else
                    break;
            }
            max = Math.max(max, str.length());
        }
        return max;
    }
}
//11%


class Solution {
    public int lengthOfLongestSubstring(String s) {
        HashSet<Character> hashSet = new HashSet<>();
        int max = 0;
        for(int i = 0, j = 0; i < s.length() && j < s.length();){
            if(hashSet.contains(s.charAt(j))){
                hashSet.remove(s.charAt(i++));
            }else{
                hashSet.add(s.charAt(j++));
                max = Math.max(max, j - i);
            }
        }
        return max;
    }
}
//92%

class Solution {
    public int lengthOfLongestSubstring(String s) {
        int[] indexes = new int[128];
        int max = 0;
        for(int i = 0, j = 0; j < s.length(); j++){
            i = Math.max(i, indexes[s.charAt(j)]);
            max = Math.max(max, j - i + 1);
            indexes[s.charAt(j)] = j + 1; //store the new front index if finding duplicate
        }
        return max;
    }
}
//94%
