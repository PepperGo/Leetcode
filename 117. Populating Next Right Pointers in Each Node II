
public class Solution {
    public void connect(TreeLinkNode root) {
        if(root == null) return;
        Queue<TreeLinkNode> queue = new LinkedList<>();
        queue.offer(root);
        while(!queue.isEmpty()){
            int size = queue.size();
            TreeLinkNode prev = null;
            while(size-- > 0){
                TreeLinkNode cur = queue.poll();
                cur.next = prev;
                prev = cur;
                if(cur.right != null)
                    queue.offer(cur.right);
                if(cur.left != null)
                    queue.offer(cur.left);
            }
        }
    }
}

public class Solution {
    public void connect(TreeLinkNode root) {
        TreeLinkNode levelstart = root;
        TreeLinkNode nextlevelcur = null;
        TreeLinkNode cur = null;
        while(levelstart != null){
            cur = levelstart;
            nextlevelcur = null;
            levelstart = null;
            while(cur != null){
                if(cur.left != null){
                    if(nextlevelcur == null)
                       levelstart = cur.left;
                    else 
                       nextlevelcur.next = cur.left;
                    nextlevelcur = cur.left;
                }
                if(cur.right != null){
                    if(nextlevelcur == null)
                       levelstart  = cur.right;
                    else 
                       nextlevelcur.next = cur.right;
                    nextlevelcur = cur.right;
                }
                cur = cur.next;
            }
        }
    }
}

/**
 * Definition for binary tree with next pointer.
 * public class TreeLinkNode {
 *     int val;
 *     TreeLinkNode left, right, next;
 *     TreeLinkNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void connect(TreeLinkNode root) {
        if(root == null) return;
        Deque<TreeLinkNode> queue = new LinkedList<>();
        queue.offerFirst(root);
        while(!queue.isEmpty()){
            int size = queue.size();
            TreeLinkNode pre = null;
            for(int i = 0; i < size; i++){
                TreeLinkNode node = queue.pollLast();
                if(node.right != null)
                    queue.offerFirst(node.right);
                if(node.left != null)
                    queue.offerFirst(node.left);
                node.next = pre;
                pre = node;
            }
        }
    }
}


/**
 * Definition for binary tree with next pointer.
 * public class TreeLinkNode {
 *     int val;
 *     TreeLinkNode left, right, next;
 *     TreeLinkNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void connect(TreeLinkNode root) {
        TreeLinkNode head = root; //the leftmost node at higher level
        TreeLinkNode cur = null; //the current node at lower level
        TreeLinkNode prev = null; //the previous node at lower level
        
        while(head != null){
            cur = head;
            prev = null;
            head = null;
            while(cur != null){
                if(cur.left != null){
                    if(prev != null){
                        prev.next = cur.left;
                    }else{
                        head = cur.left;
                    }
                    prev = cur.left;
                }
                if(cur.right != null){
                    if(prev != null){
                        prev.next = cur.right;
                    }else{
                        head = cur.right;
                    }
                    prev = cur.right;
                }
                cur = cur.next;
            }
        }
    }
}
