public class Solution {
    public int[] twoSum(int[] nums, int target) {
        for(int i = 0 ; i< nums.length - 1; i ++){
            for(int j = i + 1; j< nums.length; j++){
                if(nums[i] + nums[j] == target)
                     return new int[] {i,j};
            }
        }
     throw new IllegalArgumentException("No two sum solution");
    }
}


class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] result = new int[2];
        HashMap<Integer, Integer> hashMap = new HashMap<>();
        for(int i = 0; i < nums.length; i++){
            if(hashMap.containsKey(target - nums[i])){
                return new int[]{hashMap.get(target - nums[i]), i};
            }else{
                hashMap.put(nums[i], i);
            }
        }
        return result;
    }
}

class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer, Integer> hashMap = new HashMap<>();
        for(int i = 0; i < nums.length; i++){
            if(hashMap.containsKey(nums[i])){
                return new int[] {hashMap.get(nums[i]), i};
            }
            hashMap.put(target - nums[i], i);
        }
        throw new IllegalArgumentException("Cannot find");
    }
}

class Solution {
    public int[] twoSum(int[] nums, int target) {
        //key: value, value: index
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < nums.length; i++){
            if(map.containsKey(nums[i])){
                return new int[] {map.get(nums[i]), i};
            }
            map.put(target - nums[i], i);
        }
        throw new IllegalArgumentException("Wrong input");
    }
}
