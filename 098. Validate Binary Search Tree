class Solution {
    public boolean isValidBST(TreeNode root) {
        return isRootValid(root, Long.MIN_VALUE, Long.MAX_VALUE);
    }
    
    public boolean isRootValid(TreeNode root, long min, long max){
        if(root == null) return true;
        if(root.val <= min || root.val >= max){
            return false;
        }
        return isRootValid(root.left, min, root.val) && isRootValid(root.right, root.val, max);
    }
}


public class Solution {
    public boolean isValidBST(TreeNode root) {
        return isVaildBST(root, Long.MIN_VALUE, Long.MAX_VALUE);
    }
    
    public boolean isVaildBST(TreeNode root, long min, long max){
        if(root == null) return true;
		if(root.val <= min || root.val >= max) return false;
		return isVaildBST(root.left, min, root.val) && isVaildBST(root.right, root.val, max);
    }
}


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isValidBST(TreeNode root) {
        return checkIfValid(root, Long.MIN_VALUE, Long.MAX_VALUE);
    }
    
    public boolean checkIfValid(TreeNode node, long low, long high){
        if(node == null) return true;
        if(node.val > low && node.val < high)
            return checkIfValid(node.left, low, node.val) && checkIfValid(node.right, node.val, high);
        else
            return false;
    }
}

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isValidBST(TreeNode root) {
        if(root == null) return true;
        Stack<TreeNode> stack = new Stack<>();
        TreeNode pre = null;
        while(root != null || !stack.isEmpty()){
            while(root != null){
                stack.push(root);
                root = root.left;
            }
            root = stack.pop();
            if(pre != null && pre.val >= root.val) return false;
            pre = root;
            root = root.right;
        }
        return true;
    }
}
