
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
		getList(result,root, 0);
		Collections.reverse(result); // or ArrayList.add(0, new ArrayList<Integer>) in the getList method;
		return result;
    }
	
	public void getList(List<List<Integer>> result, TreeNode root, int level){
	    if(root == null) return;
		
		if(result.size() < level + 1){
		   result.add(new ArrayList<Integer>());
		}
		result.get(level).add(root.val);
		getList(result, root.left, level+1);
		getList(result, root.right, level+1);
	}
}

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> result = new LinkedList<>();
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        if(root == null) return result;
        queue.offer(root);
        while(!queue.isEmpty()){
            int size = queue.size();
            List<Integer> temp = new ArrayList<>();
            for(int i = 0; i < size; i++){
                TreeNode node = queue.poll();
                if(node.left != null)
                    queue.offer(node.left);
                if(node.right != null)
                    queue.offer(node.right);
                temp.add(node.val);
            }
            result.add(0, temp);
        }
        return result;
    }
}
