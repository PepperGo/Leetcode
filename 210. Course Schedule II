public class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        int[][] graph = new int[numCourses][numCourses];
        int[] indegree = new int[numCourses];
        
        for(int i = 0; i < prerequisites.length; i++){
            int basic = prerequisites[i][0];
            int pre = prerequisites[i][1];
            if(graph[pre][basic] == 0)
               indegree[basic]++;
            graph[pre][basic] = 1;
        }
        
        int count = 0;
        Queue<Integer> queue = new LinkedList<Integer>();
        ArrayList<Integer> result = new ArrayList<Integer>();
        for(int i = 0; i < indegree.length; i++){
            if(indegree[i] == 0) {
                queue.offer(i);
                result.add(i);
            }
        }
        
        while(!queue.isEmpty()){
            int pre = queue.poll();
            count++;
            for(int i = 0; i < numCourses; i++){
                if(graph[pre][i] == 1){
                    if(--indegree[i] == 0){
                        queue.offer(i);
                        result.add(i);
                    }
                }
            }
        }
        
        if(count == numCourses){
            int[] schedule = new int[numCourses];
            for(int i = 0; i < result.size(); i++){
                schedule[i] = result.get(i);
            }
            return schedule;
        }
        else 
            return new int[0];
    }
}



class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        int[] degrees = new int[numCourses];
        List<List<Integer>> paths = new ArrayList<>();
        for(int i = 0; i < numCourses; i++){
            paths.add(new ArrayList<Integer>());
        }
        initialize(prerequisites, degrees, paths);
        return solveByBFS(degrees, paths);
    }
    
    public void initialize(int[][] prerequisites, int[] degrees, List<List<Integer>> paths){
        for(int[] prerequisite : prerequisites){
            int start = prerequisite[1];
            int end = prerequisite[0];
            degrees[end]++;
            paths.get(start).add(end);
        }
    } 
    
    public int[] solveByBFS(int[] degrees, List<List<Integer>> paths){
        Queue<Integer> toVisit = new LinkedList<>();
        for(int i = 0; i < degrees.length; i++){
            if(degrees[i] == 0)
                toVisit.offer(i);
        }
        int index = 0;
        int[] result = new int[degrees.length];
        while(!toVisit.isEmpty()){
            int cur = toVisit.poll();
            result[index++] = cur;
            for(int adj : paths.get(cur)){
                degrees[adj]--;
                if(degrees[adj] == 0)
                    toVisit.offer(adj);
            }
        }
        return index == degrees.length ? result : new int[0];
    }
}
