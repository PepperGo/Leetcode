class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> result = new ArrayList<>();
        if(n == 0) return result;
        backtrack(result, "", 0, 0, n);
        return result;
    }
    
    public void backtrack(List<String> result, String str, int left, int right, int max){
        if(str.length() == 2*max){
            result.add(str);
            return;
        }
        if(left < max){
            backtrack(result, str+'(', left+1, right, max);
        }
        if(right < left){
            backtrack(result, str+')', left, right+1, max);
        }
        
    }
}


public class Solution {
    public List<String> generateParenthesis(int n) {
        ArrayList<String> result = new ArrayList<String>();
        caculateResult(result, "", 0, 0, n);
        return result;
    }
    
    public void caculateResult(ArrayList<String> res, String str, int left, int right, int length){
        if(left == length && right == length){
            res.add(str);
        }
        
        if(left < length) caculateResult(res, str + "(", left + 1, right, length );
        if(right < left) caculateResult(res, str + ")", left, right + 1, length);
    }
}


class Solution {
    public List<String> generateParenthesis(int n) {
        List<List<String>> result = new ArrayList<>();
        result.add(new ArrayList<String>(Arrays.asList("")));
        for(int i = 1; i < n + 1; i++){
            List<String> temp = new ArrayList<>();
            for(int j = 0; j < i; j++){
                for(String left : result.get(j)){
                    for(String right : result.get(i - j - 1)){
                        String str = "(" + left + ")" + right;
                        temp.add(str);
                    }
                }
            }
            result.add(temp);
        }
        
        return result.get(n);
    }
}
