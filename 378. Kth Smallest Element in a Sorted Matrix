class Solution {
    private int R, L;
    public int kthSmallest(int[][] matrix, int k) {
        R = matrix.length;
        L = matrix[0].length;
        int low = matrix[0][0];
        int high = matrix[R-1][L-1]+1;
        while(low < high){
            int mid = low+(high-low)/2;
            int count = 0, j = L-1;
            for(int i = 0; i < R; i++){
                while(j >= 0 && matrix[i][j] > mid)
                    j--;
                count += j+1;
            }
            if(count < k) 
                low = mid+1;
            else
                high = mid;
        }
        return low;
    }
}

class Solution {
    private int R, L;
    public int kthSmallest(int[][] matrix, int k) {
        R = matrix.length;
        L = matrix[0].length;
        PriorityQueue<int[]> pq = new PriorityQueue<>(new Comparator<int[]>(){
            public int compare(int[] a, int[] b){
                if(a[2] > b[2]){
                    return 1;
                }else if(a[2] < b[2]){
                    return -1;
                }else
                    return 0;
            }
        });
        
        for(int j = 0; j < L; j++){
            pq.offer(new int[]{0, j, matrix[0][j]});
        }
        while(--k > 0){
            int[] cur = pq.poll();
            int newX = cur[0]+1;
            int newY = cur[1];
            if(newX >= R) continue;
            int val = matrix[newX][newY];
            pq.offer(new int[]{newX, newY, val});
        }
        return pq.poll()[2];
    }
}

class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        PriorityQueue<Node> queue = new PriorityQueue<>(new Comparator<Node>(){
            public int compare(Node n1, Node n2){
                return n1.val - n2.val;
            }
        });
        for(int i = 0, j = 0; j < matrix[0].length; j++)
            queue.offer(new Node(i, j, matrix[i][j]));
        for(int i = 1; i < k; i++){
            Node node = queue.poll();
            if(node.row == matrix.length - 1) continue;
            queue.offer(new Node(node.row + 1, node.col, matrix[node.row + 1][node.col]));
        }
        return queue.poll().val;
    }
    
    class Node{
        public int row;
        public int col;
        public int val;
        
        Node(int x, int y, int val){
            row = x;
            col = y;
            this.val = val;
        }
    }
}
