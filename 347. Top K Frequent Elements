class Solution {
    //https://www.quora.com/What-is-the-difference-between-HashSet-HashMap-and-hash-table-How-do-they-behave-in-a-multi-threaded-environment
    public List<Integer> topKFrequent(int[] nums, int k) {
        Map<Integer,Integer> hashMap = new HashMap();
        for(int num : nums)
            hashMap.put(num, hashMap.getOrDefault(num, 0)+ 1);
        
        List<Integer>[] count = new List[nums.length + 1];
        for(int key : hashMap.keySet()){
            if(count[hashMap.get(key)] == null){
                count[hashMap.get(key)] = new ArrayList<Integer>();
            }
            count[hashMap.get(key)].add(key);
        }
        
        List<Integer> res = new ArrayList<Integer>();
        for(int kCount = count.length - 1; kCount >= 0 && res.size() < k; kCount--){
            if(count[kCount] != null)
                res.addAll(count[kCount]); 
        }
        return res;
    }
}

//One special problem is: res.addAll(count[kCount]) would add all the numbers has the same frequency.
//Leetcode compiler cannot detect that special problem.


class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        HashMap<Integer, Integer> counts = new HashMap<>();
        for(int num : nums){
            counts.put(num, counts.getOrDefault(num, 0) + 1);
        }
        
        PriorityQueue<Map.Entry<Integer, Integer>> queue = new PriorityQueue<>(new Comparator<Map.Entry<Integer, Integer>>(){
            public int compare(Map.Entry<Integer, Integer> a, Map.Entry<Integer, Integer> b){
                return a.getValue() - b.getValue();
            }
        });
        
        for(Map.Entry<Integer, Integer> iterator : counts.entrySet()){
            queue.add(iterator);
            if(queue.size() > k)
                queue.poll();
        }
        List<Integer> result = new ArrayList<>();
        for(Map.Entry<Integer, Integer> mp : queue){
            result.add(mp.getKey());
        }
        return result;
    }
}
