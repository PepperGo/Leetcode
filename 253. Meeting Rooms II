/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public int minMeetingRooms(Interval[] intervals) {
        Arrays.sort(intervals, new Comparator<Interval>(){
           public int compare(Interval i1, Interval i2){
               return i1.start != i2.start ? i1.start - i2.start : i1.end - i2.end;
           } 
        });
        PriorityQueue<Interval> queue = new PriorityQueue<>(new Comparator<Interval>(){
            public int compare(Interval i1, Interval i2){
                return i1.end - i2.end;
            }
        });
        for(int i = 0; i < intervals.length; i++){
            if(queue.isEmpty()){
                queue.offer(intervals[i]);
            }else{
                Interval earliest = queue.poll();
                if(earliest.end > intervals[i].start){
                    queue.offer(intervals[i]);
                }else{
                    earliest.end = intervals[i].end;
                }
                queue.offer(earliest);
            }
        }
        return queue.size();
    }
}
