class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> result = new ArrayList<>();
        dfs(result, new ArrayList<Integer>(), root, sum);
        return result;
    }
    
    public void dfs(List<List<Integer>> result, List<Integer> path, TreeNode node, int remain){
        if(node == null){
            return;
        }
        if(node.left == null && node.right == null && node.val == remain){
            path.add(node.val);
            result.add(new ArrayList(path));
            path.remove(path.size()-1);
            return;
        }
        path.add(node.val);
        dfs(result, path, node.left, remain-node.val);
        dfs(result, path, node.right, remain-node.val);
        path.remove(path.size()-1);
    }
}


public class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
		List<Integer> item = new ArrayList<Integer>();
		getList(result, item, root, sum);
		return result;
    }
	
	public void getList(List<List<Integer>> result, List<Integer> item, TreeNode root, int sum){
		if(root == null) return;
		item.add(root.val);
		if(root.left == null && root.right == null && sum == root.val)
		    result.add(new ArrayList(item));   //// why we need to add new ArrayList(item):
		                                       //create a new list that has the same content as the original list 
		                                       //if not, we get the same list all the time
                                               
		else{
	        getList(result, item, root.left, sum - root.val);
		    getList(result, item, root.right, sum - root.val);
		}
		item.remove(item.size()-1);
	}
}


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> result = new ArrayList<>();
        if(root == null) return result;
        backtrack(result, new ArrayList<>(), root, sum);
        return result;
        
    }
    
    public void backtrack(List<List<Integer>> result, List<Integer> temp, TreeNode node, int remain){
        if(node == null) return;
        temp.add(node.val);
        if(node.left == null && node.right == null && node.val == remain){
            result.add(new ArrayList<>(temp));
            temp.remove(temp.size() - 1);
            return;
        }
        backtrack(result, temp, node.left, remain - node.val);
        backtrack(result, temp, node.right, remain - node.val);
        temp.remove(temp.size() - 1);
    }
}
