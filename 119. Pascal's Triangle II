public class Solution {
    public List<Integer> getRow(int rowIndex) {
        List<Integer> intList = new ArrayList<Integer>();
        if(rowIndex == 0){
            intList.add(1);
        }
        else{
            for(int i = 0; i <= rowIndex; i++){
                int value = binomialCoefficient(rowIndex, i);
                intList.add(value);
            }
        }
       return intList;
    }

    
    public int binomialCoefficient(int n, int k){
        if(k == 0 || k == n ) 
            return 1;
        else 
            return binomialCoefficient(n - 1, k - 1) + binomialCoefficient(n - 1, k);
    }

}

//Submission Result: Time Limit Exceeded!!!

public class Solution {
    public List<Integer> getRow(int rowIndex) {
        List<Integer> resultList = new ArrayList<Integer>();
        resultList.add(1);
        for(int i = 1; i <=rowIndex; i++){
            for(int j = i-1; j > 0; j--){
                resultList.set(j,resultList.get(j-1)+resultList.get(j));
            } 
            resultList.add(1);
        }

        return resultList;
    }
}


class Solution {
    public List<Integer> getRow(int rowIndex) {
        List<Integer> result = new ArrayList<Integer>(rowIndex + 1);
        for(int i = 0; i < rowIndex + 1; i++){
            result.add(1);
            //the reason why j start from i: 
            //if j start from 1 to i, the value will be updated immediately, which will affect the result
            for(int j = i; j > 1 ; j--){
                result.set(j - 1, result.get(j - 2) + result.get(j - 1));
            }
        }
        return result;
    }
}


class Solution {
    public List<Integer> getRow(int rowIndex) {
        List<Integer> result = new LinkedList<>();
        for(int i = 0; i <= rowIndex; i++){
            result.add(1);
            for(int j = i; j > 1; j--){
                result.set(j - 1, result.get(j - 2) + result.get(j - 1));
            }
        }
        
        return result;
    }
}
//91.88%
