class Solution {
    public void nextPermutation(int[] nums) {
        for(int i = nums.length - 2; i >= 0; i--){
            if(nums[i] < nums[i+1]) {
            	  findNextPer(nums,i);
            	  break;
               }
            if(i == 0)  sortTheNum(nums, 0, nums.length-1);
        } 
    }
    
    void findNextPer(int[] nums, int index){
        sortTheNum(nums, index + 1, nums.length-1);

        for(int i = index + 1; i < nums.length; i++){
            if(nums[i] > nums[index]){
                swap(nums, i, index);
                break;
            }
        }
        sortTheNum(nums, index+1, nums.length-1);
    }
    
    void sortTheNum(int[] nums, int start, int end){
        for(int i = start; i <= end; i++){
            swap(nums, i, getMinIndex(nums,i, end));
        }
    }
    
    void swap(int[] nums, int i, int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    
    int getMinIndex(int[] nums, int start, int end){
        int min = nums[start];
        int index = start;
        for(int i = start; i <= end; i++){
            if(nums[i] < min){
                min = nums[i];
                index = i;
            }
        }
        return index;
    }
           
}



class Solution {
    public void nextPermutation(int[] nums) {
        int pivot = nums.length - 2;
        while(pivot >= 0){
            if(nums[pivot] < nums[pivot + 1])
                break;
            pivot--;
        }
        int start, end;
        if(pivot >= 0){
            int smallestL = smallestLarger(nums, pivot + 1, nums.length - 1, nums[pivot]);
            swap(nums, pivot, smallestL);
            start = pivot + 1;
            end = nums.length - 1;
        }else{
            start = 0;
            end = nums.length - 1;
        }
        while(start < end){
            swap(nums, start++, end--);
        }
        
    }
    
    public void swap(int[] nums, int i, int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    
    public int smallestLarger(int[] nums, int start, int end, int value){
        int result = Integer.MAX_VALUE;
        int index = -1;
        for(int i = end; i >= start; i--){
            if(nums[i] > value && result > nums[i]){
                result = nums[i];
                index = i;
            }
        }
        return index;
    }
}

class Solution {
    public void nextPermutation(int[] nums) {
        int pivot = nums.length - 2;
        while(pivot>= 0 && nums[pivot] >= nums[pivot + 1]){
            pivot--;
        }
        if(pivot >= 0){
            int p = nums.length - 1;
            while(p >= 0 && nums[p] <= nums[pivot]){
                p--;
            }
            swap(nums, p, pivot);
        }
        reverse(nums, pivot + 1);
    }
    
    private void reverse(int[] nums, int start) {
        int i = start, j = nums.length - 1;
        while (i < j) {
            swap(nums, i, j);
            i++;
            j--;
        }
    }

    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
