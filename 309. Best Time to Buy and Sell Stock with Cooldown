class Solution {
    public int maxProfit(int[] prices) {
        if(prices.length == 0) return 0;
        int[] sell = new int[prices.length]; //sell[i]: day i, the maxProfit for any sequence end with sell.
        int[] rest = new int[prices.length]; //rest[i]: day i, the maxProfit for any sequence end with rest.
        int[] buy = new int[prices.length];  //buy[i]:  day i, the maxProfit for any sequence end with buy.
        sell[0] = 0;
        rest[0] = 0;
        buy [0] = -prices[0];
        for(int i = 1; i < prices.length; i++){
            buy[i] = Math.max(buy[i - 1], rest[i - 1] - prices[i]);
            rest[i] = Math.max(Math.max(rest[i - 1], buy[i -1]), sell[i - 1]);
            sell[i] = Math.max(sell[i - 1], prices[i] + buy[i - 1]);
        }
        return Math.max(rest[prices.length - 1], sell[prices.length - 1]);
    }
}

or think directly:
buy[i] = Math.max(buy[i - 1], sell[i - 2] - prices[i]);   
sell[i] = Math.max(sell[i - 1], buy[i - 1] + prices[i]);


class Solution {
    public int maxProfit(int[] prices) {
        if(prices.length == 0 || prices.length < 2) return 0;
        int[] sell = new int[prices.length]; //sell[i]: day i, the max profit with the end of sell
        int[] buy = new int[prices.length];  //buy[i]:  day i, the max profit with the end of buy
        sell[0] = 0;
        sell[1] = Math.max(prices[1] - prices[0], 0);
        buy[0] = -prices[0];
        buy[1] = Math.max(-prices[0], -prices[1]);
        for(int i = 2; i < prices.length; i++){
            sell[i] = Math.max(sell[i - 1], prices[i] + buy[i - 1]);
            buy[i] = Math.max(buy[i - 1], sell[i - 2] - prices[i]);
        }
        return sell[prices.length - 1];
    }
}


class Solution {
    public int maxProfit(int[] prices) {
        if(prices.length == 0 || prices.length < 2) return 0;
        int sell0 = 0;
        int sell1 = Math.max(prices[1] - prices[0], 0);
        int buy1 = Math.max(-prices[0], -prices[1]);
        for(int i = 2; i < prices.length; i++){
            int tempS = sell0;
            sell0 = sell1;
            sell1 = Math.max(sell1, prices[i] + buy1);
            buy1 = Math.max(buy1, tempS - prices[i]);
        }
        return sell1;
    }
}

//sell0, sell1 -> sell1
//buy0, buy1 -> buy1
