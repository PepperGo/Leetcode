/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
		if(p != null && q != null){
		    if(p.val == q.val){
			    return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);		
				}
		    else 
			    return false;
			
		}
		else if(p == null && q == null) return true;
		else 
			return false;
  
    } 
}


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if((p != null && q == null) || (p == null && q != null))
            return false;
        if(p == null && q == null) 
            return true;
        if(p.val == q.val) 
            return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
        else
            return false;
    }
}

if((p != null && q == null) || (p == null && q != null)) 
   return false; 
if(p == null && q == null) 
   return true;

if(p == null && q == null) 
   return true;
if(p == null || q == null) 
   return false;
   

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(p);
        queue.add(q);
        while(!queue.isEmpty()){
            TreeNode temp1 = queue.poll();
            TreeNode temp2 = queue.poll();
            if(temp1 == null && temp2 == null)
                continue;
            else if(temp1 == null || temp2 == null || temp1.val != temp2.val)
                return false;
            queue.add(temp1.left);
            queue.add(temp2.left);
            queue.add(temp1.right);
            queue.add(temp2.right);
        }
        return true;
    }
}
