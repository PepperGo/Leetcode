public class Solution {
    public int findMin(int[] nums) {
        int start = 0;
        int end = nums.length - 1;
        int mid = 0;
        while(start < end){
            if(nums[start] < nums[end]) return nums[start];
            mid = start + (end - start)/2;  // binary search bug: if the size of array are too large, equal or larger than the upper bound of int type, hi + lo may cause an overflow and become a negative number.
            if(nums[mid] < nums[start])
                end = mid;
            else if(nums[mid] > nums[start])
                start = mid + 1;
            else 
                start++;
        }
        return nums[start];
    }
}



class Solution {
    public int findMin(int[] nums) {
        int start = 0, end = nums.length - 1;
        while(start < end){
            if(nums[start] < nums[end]) return nums[start];
            int mid = start + (end - start)/2;
            if(nums[end] < nums[mid]){
                start = mid + 1;
            }else if(nums[end] > nums[mid]){
                end = mid;
            }else{
                end--;
            }
        }
        return nums[start];
    }
}
