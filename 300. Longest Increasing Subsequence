class Solution {
    public int lengthOfLIS(int[] nums) {
	   if(nums.length == 0) return 0;
       int[] dp = new int[nums.length];
	   dp[0] = 1; // end in index 0
	   int maxLength = 1;
	   for(int i = 1; i < nums.length; i++){
	       int temp = 0;
	       for(int j = 0; j < i; j++){
		       if(nums[i] > nums[j])
		          temp = Math.max(temp, dp[j]);
		   }
		   dp[i] = temp + 1;
		   maxLength = Math.max(maxLength,dp[i]);
	   }
	   return maxLength;
	   
    }
}
//BinarySearch && DP :http://blog.csdn.net/cxhply/article/details/49423501
//https://leetcode.com/problems/longest-increasing-subsequence/solution/#approach-4-dynamic-programming-with-binary-searchaccepted
public class Solution {
    public int lengthOfLIS(int[] nums) {
        int[] dp = new int[nums.length];
        int len = 0;
        for (int num : nums) {
            int i = Arrays.binarySearch(dp, 0, len, num);
            if (i < 0) {
                i = -(i + 1);
            }
            dp[i] = num;
            if (i == len) {
                len++;
            }
        }
        return len;
    }
}

/*Arrays.binarySearch() method returns index of the search key, 
if it is contained in the array, else it returns (-(insertion point) - 1). 
The insertion point is the point at which the key would be inserted into the array: 
the index of the first element greater than the key, or a.length if all elements in the array are less than the specified key.
*/


class Solution {
    public int lengthOfLIS(int[] nums) {
        if(nums.length == 0)
            return 0;
        int[] dp = new int[nums.length]; //dp[i]: the LIS at index i in nums
        int max = 1;
        for(int i = 0; i< nums.length; i++){
            int count = 0;
            for(int j = 0; j < i; j++){
                if(nums[j] < nums[i]){            
                    count = Math.max(count, dp[j]);
                }
            }
            dp[i] = count + 1;
            max = Math.max(max, dp[i]);
        }
        return max;
    }
}

