class Solution {
    public void rotate(int[][] matrix) {
        int R = matrix.length;
        int L = matrix[0].length;
        //1. diagonal
        for(int i = 0; i < R; i++){
            for(int j = i; j < L; j++){
                int temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;
            }
        }
        //2. x = R/2;
        for(int row = 0; row < R; row++){
            int i = 0, j = L-1;
            while(i < j){
                int temp = matrix[row][i];
                matrix[row][i] = matrix[row][j];
                matrix[row][j] = temp;
                i++;
                j--;
            }
        }
    }
}

public class Solution {
    public void rotate(int[][] matrix) {
        getSymmetryByXY(matrix);
        getSymmetryByY(matrix);
    }
    public void getSymmetryByXY(int[][] matrix){
        int temp = 0;
        for(int i = 0; i < matrix[0].length; i++){
            for(int j = i; j < matrix[0].length; j++){
                temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;
            }
        }
    }
    
    public void getSymmetryByY(int[][] matrix){
        int temp = 0;
        int n = matrix[0].length;
        for(int j = 0; j < matrix[0].length/2; j++){
            for(int i = 0; i < matrix[0].length; i++){
                temp = matrix[i][j];
                matrix[i][j] = matrix[i][n-1-j];
                matrix[i][n-1-j] = temp;
            }
        }
    }
    
}



class Solution {
    public void rotate(int[][] matrix) {
        for(int i = 0; i < matrix.length; i++)
            for(int j = i; j < matrix[0].length; j++){
                int temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;
            }
        
        for(int i = 0; i < matrix.length; i++){
            for(int j = 0; j < matrix[0].length/2; j++){
                int temp = matrix[i][j];
                matrix[i][j] = matrix[i][matrix[0].length - 1 -j];
                matrix[i][matrix[0].length - 1 -j] = temp;
            }
        }
    
    }
}
