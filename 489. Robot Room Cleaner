/**
 * // This is the robot's control interface.
 * // You should not implement it, or speculate about its implementation
 * interface Robot {
 *     // Returns true if the cell in front is open and robot moves into the cell.
 *     // Returns false if the cell in front is blocked and robot stays in the current cell.
 *     public boolean move();
 *
 *     // Robot will stay in the same cell after calling turnLeft/turnRight.
 *     // Each turn will be 90 degrees.
 *     public void turnLeft();
 *     public void turnRight();
 *
 *     // Clean the current cell.
 *     public void clean();
 * }
 */
class Solution {
    private int[][] dirs = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
    HashSet<String> visited;
    public void cleanRoom(Robot robot) {
        visited = new HashSet<>();
        backtrack(robot, 0, 0, 0);
    }
    
    public void backtrack(Robot robot, int x, int y, int dir){
        robot.clean();
        String point = x + "-" + y;
        visited.add(point);
        for(int i = 0; i < 4; i++){
            int curDir = (dir+i) % 4;
            int newX = x + dirs[curDir][0];
            int newY = y + dirs[curDir][1];
            String newP = newX + "-" + newY;
            if(!visited.contains(newP) && robot.move()){
                backtrack(robot, newX, newY, curDir);
                robot.turnRight();
                robot.turnRight();
                robot.move();
                robot.turnLeft();
                robot.turnLeft();
            }
            robot.turnRight();
        }
    }
    
}
