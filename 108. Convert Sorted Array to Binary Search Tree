class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        return buildBST(nums, 0, nums.length-1);
    }
    
    public TreeNode buildBST(int[] nums, int low, int high){
        if(low > high) return null;
        if(low == high) return new TreeNode(nums[low]);
        int mid = low + (high-low)/2;
        TreeNode node = new TreeNode(nums[mid]);
        node.left = buildBST(nums, low, mid-1);
        node.right = buildBST(nums, mid+1, high);
        return node;
    }
}


public class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
	    return getRoot(nums, 0, nums.length - 1);
	    
    }
	
	public TreeNode getRoot(int[] nums, int start, int end){
	    if(start > end) return null;
		int mid = nums[(start + end)/2];
		TreeNode root = new TreeNode(mid);
		root.left = getRoot(nums, start, (start + end)/2 - 1);
		root.right = getRoot(nums, (start + end)/2 + 1, end);
		return root;
	}
}


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        return helper(nums, 0, nums.length - 1);
    }
    
    public TreeNode helper(int[] nums, int i, int j){//[i, j]
        if(i > j) 
            return null;
        else if(i == j) 
            return new TreeNode(nums[i]);
        else{
            int mid = j + (i - j)/2;
            TreeNode node = new TreeNode(nums[mid]);
            node.left = helper(nums, i, mid - 1);
            node.right = helper(nums, mid + 1, j);
            return node;
        }
    }
}
