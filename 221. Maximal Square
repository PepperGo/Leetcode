class Solution {
    private int L, R;
    public int maximalSquare(char[][] matrix) {
        R = matrix.length;
        L = matrix[0].length;
        int max = 0;
        int[][] dp = new int[R+1][L+1];
        for(int i = 1; i <= R; i++){
            for(int j = 1; j <= L; j++){
                if(matrix[i-1][j-1] == '1'){
                    dp[i][j] = Math.min(Math.min(dp[i-1][j], dp[i][j-1]), dp[i-1][j-1]) + 1;
                    max = Math.max(max, dp[i][j]);
                }
            }
        }
        return max*max;
    }
}

public class Solution {
    public int maximalSquare(char[][] matrix) {
        int height = matrix.length;
        if(height == 0) return 0;
        int width = matrix[0].length;
        
        int[][] dp = new int[height + 1][width + 1];
        int maxlength = 0;
        for(int i = 1; i < height + 1; i++){
            for(int j = 1; j < width + 1; j++){
                if(matrix[i - 1][j - 1] == '1'){
                    dp[i][j] = Math.min(Math.min(dp[i - 1][j - 1], dp[i - 1][j]), dp[i][j - 1]) + 1;
                    maxlength = Math.max(dp[i][j], maxlength);
                }
            }
        }
        return maxlength * maxlength;
    }
}


class Solution {
    public int maximalSquare(char[][] matrix) {
        if(matrix.length == 0) return 0;
        int[][] dp = new int[matrix.length][matrix[0].length];
        int max = 0;
        for(int i = 0; i < matrix.length; i++){
            for(int j = 0; j < matrix[0].length; j++){
                if(matrix[i][j] != '0'){
                    if(i == 0 || j == 0)
                        dp[i][j] = matrix[i][j] - '0';
                    else
                        dp[i][j] = Math.min(Math.min(dp[i - 1][j], dp[i][j - 1]), dp[i - 1][j - 1]) + 1;
                    max = Math.max(max, dp[i][j] * dp[i][j]);
                }
            }
        }
        return max;
    }
}
