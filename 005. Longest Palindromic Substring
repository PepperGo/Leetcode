class Solution {
    private int startIndex = 0;
    private int endIndex = 0;
    private int l = 1;
    public String longestPalindrome(String s) {
        if(s.length() < 2) {
            return s;
        }
        for(int i = 0; i < s.length(); i++) {
            findLongestPalinadrome(i, i, s);
            findLongestPalinadrome(i, i+1, s);
        }
        return s.substring(startIndex, endIndex+1);
    }
    
    public void findLongestPalinadrome(int i, int j, String s) {
        while(i >= 0 && j <= s.length()-1 && s.charAt(i) == s.charAt(j)) {
            i--;
            j++;
        }
        if(j - i - 1 > l) {
            startIndex = i+1;
            endIndex = j-1;
            l = j - i - 1;
        }
    }
}

public class Solution {
    public String longestPalindrome(String s) {

    int length = 0;
    int left = 0;
    int right = 0;
    for(int i = 0 ; i < s.length() - 1; i++){
        int l1 = lengthOfPalindrome(s,i,i);
        int l2 = lengthOfPalindrome(s,i,i+1);
        length = Math.max(l1, l2);
        if(length > right - left){
            if(l1 > l2){
                left = i - length/2;
                right = i + length/2 ;
            }else{
                left = i - length/2 + 1;
                right = i + length/2;
            }
        }
        }
           return s.substring(left, right + 1); 
           //String substring(int beginIndex, int endIndex): 
           //Returns the substring starting from the given index(beginIndex) till the specified index(endIndex). 
    }
    
 
        
    
    int lengthOfPalindrome(String s, int left, int right){
        while(left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)){
            left--;
            right++;
        }
        return right - left - 1;
    }
    
}



class Solution {
    int start, end, l = 0;
    public String longestPalindrome(String s) {
        if(s.length() < 2) return s;
        for(int i = 0; i < s.length(); i++){
            extendPalindrome(s, i, i);
            extendPalindrome(s, i, i + 1);
        }
        return s.substring(start, end + 1);
    }
    
    public void extendPalindrome(String s, int left, int right){
        while(left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)){
            left--;
            right++;
        }
        if(right - 1 - left - 1 + 1 > l){
            l = right - left - 1;
            start = left + 1;
            end = right - 1;
        }
    }
}


class Solution {
    int max = 0;
    String lp = "";
    public String longestPalindrome(String s) {
        for(int i = 0; i < s.length(); i++){
            longestStartFromMid(s, i, i);
            longestStartFromMid(s, i, i + 1);
        }
        return lp;
    }
    
    public void longestStartFromMid(String s, int x, int y){
        while(x >= 0 && y < s.length() && s.charAt(x) == s.charAt(y)){
            x--;
            y++;
        }
        int l = (y - 1) - (x + 1) + 1;
        if(l > max){
            lp = s.substring(x + 1, y - 1 + 1);
            max = l;
        }
    }
}
