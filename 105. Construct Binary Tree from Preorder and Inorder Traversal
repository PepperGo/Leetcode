
class Solution {
    private int len;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        len = preorder.length;
        return buildTreeFromInOrder(preorder, inorder, 0, 0, len-1);
    }
    
    public TreeNode buildTreeFromInOrder(int[] preorder, int[] inorder, int index, int low, int high){
        if(low > high || index >= len) return null;
        TreeNode node = new TreeNode(preorder[index]);
        int idx = getIndex(inorder, low, high+1, node.val);
        node.left = buildTreeFromInOrder(preorder, inorder, index+1, low, idx-1);
        node.right = buildTreeFromInOrder(preorder, inorder, index+idx-low+1, idx+1, high);
        return node;
    }
    
    public int getIndex(int[] nums, int low, int high, int target){
        int index = low;
        for(int i = low; i < high; i++){
            if(nums[i] == target)
                index = i;
        }
        /** Cannot use binary search
        while(low < high){
            int mid = low+(high-low)/2;
            if(nums[mid] < target){
                low = mid+1;
            }else{
                high = mid;
            }
        }
        **/
        return index;
    }
}


public class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        return getRoot(0,0,inorder.length - 1,preorder,inorder);
    }
    
    public TreeNode getRoot(int index, int inOrderStart, int inOrderEnd, int[] preorder, int[] inorder){
        if(inOrderStart > inOrderEnd || index > preorder.length - 1) return null;
        
        TreeNode root = new TreeNode(preorder[index]);
        int inIndex = 0;
        for(int i = inOrderStart; i <= inOrderEnd; i++){
            if(inorder[i] == preorder[index]) inIndex = i;
        }
        
        root.left = getRoot(index + 1, inOrderStart, inIndex - 1, preorder, inorder);
        root.right = getRoot(index + inIndex + 1 - inOrderStart, inIndex + 1, inOrderEnd, preorder, inorder);
        return root;
    }
}


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int index = 0;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        return buildTree(preorder, inorder, 0, preorder.length - 1);
    }
    
    public TreeNode buildTree(int[] preorder, int[] inorder, int start, int end){
        if(start > end) return null;
        int rootValue = preorder[index++];
        TreeNode root = new TreeNode(rootValue);
        if(start == end) return root;
        int pivot = search(inorder, rootValue, start, end);
        root.left = buildTree(preorder, inorder, start, pivot - 1);
        root.right = buildTree(preorder, inorder, pivot + 1, end);
        return root;
    }
    
    public int search(int[] array, int value, int start, int end){
    
        for(int i = start; i <= end; i++){
            if(array[i] == value)
                return i;
        }
        /* Cannot use binary search, since it's not sorted
         *
        while(start <= end){
            int mid = start + (end - start)/2;
            if(array[mid] == value)
                return mid;
            else if(array[mid] < value){
                start = mid + 1;
            }else{
                end = mid - 1;
            }
        }
        */
        throw new IllegalArgumentException("Cannot find value in array");
    }
    
}
