https://www.interviewcake.com/concept/java/lru-cache

public class LRUCache {
    private int capacity;
    private HashMap<Integer, LRUNode> hashMap = new HashMap<>();
    private LRUNode head = new LRUNode();
    private LRUNode tail = new LRUNode();
    public LRUCache(int capacity) {
        this.capacity = capacity;
        head.next = tail;
        tail.prev = head;
    }
    
    public int get(int key) {
        LRUNode node = hashMap.getOrDefault(key, null);
        if (node == null) {
            return -1;
        }
        moveToHead(node);
        return node.value;
    }
    
    public void put(int key, int value) {
        LRUNode curNode = hashMap.getOrDefault(key, null);
        if (curNode == null) {
            curNode = new LRUNode();
            curNode.key = key;
            curNode.value = value;
            hashMap.put(key, curNode);
            addNode(curNode);
            if (hashMap.size() > capacity) {
                LRUNode lastNode = popFromTail();
                hashMap.remove(lastNode.key);
            }
          
        } else {
            curNode.value = value;
            moveToHead(curNode);
        }
    }
    
    /** Add a node right after the head **/
    private void addNode(LRUNode node) {
        node.next = head.next;
        head.next.prev = node;
        head.next = node;
        node.prev = head;
    }
    
    /** Remove given node **/
    private void removeNode(LRUNode node) {
        node.prev.next = node.next;
        node.next.prev = node.prev;
    }
    
    private void moveToHead(LRUNode node) {
        removeNode(node);
        addNode(node);
    }
    
    private LRUNode popFromTail() {
        LRUNode node = tail.prev;
        removeNode(node);
        return node;
    }
    
    class LRUNode {
        int key;
        int value;
        LRUNode next = null;
        LRUNode prev = null;
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */


class LRUCache {
    private int capacity;
    private Map<Integer, LRUNode> map;
    private LRUNode head;
    private LRUNode tail;

    public LRUCache(int capacity) {
        this.capacity = capacity;
        map = new HashMap<>();
        //dummy head and tail
        head = new LRUNode(0, 0);
        tail = new LRUNode(0, 0);
        head.next = tail;
        tail.prev = head;
        
    }
    
    public int get(int key) {
        if(!map.containsKey(key)){
            return -1;
        }
        LRUNode cur = map.get(key);
        moveNodeToHead(cur);
        return cur.value;
    }
    
    public void put(int key, int value) {
        if(map.containsKey(key)){
            LRUNode node = map.get(key);
            node.value = value;
            moveNodeToHead(node);
            return;
        }
        if(map.keySet().size() >= capacity){
            deleteNodeAtTail();            
        }
        LRUNode node = new LRUNode(key, value);
        moveNodeToHead(node);
        map.put(key, node);
    }
    
    public void removeNode(LRUNode node){
        if(node.next != null)
            node.next.prev = node.prev;
        if(node.prev != null)
            node.prev.next = node.next;
        
        //delete from hashMap
        map.remove(node.key);
    }
    
    public void moveNodeToHead(LRUNode node){
        removeNode(node);
        LRUNode curHead = head.next;
        head.next = node;
        node.next = curHead;
        node.prev = head;
        curHead.prev = node;
        map.put(node.key, node);
    }
    
    public void deleteNodeAtTail(){
        LRUNode curTail = tail.prev;
        removeNode(curTail);
    }
    
}

//It's a DoubleListNode
class LRUNode{
    //normally, we will encapsulate it to private
    int key;
    int value;
    LRUNode prev;
    LRUNode next;

    LRUNode(int key, int value){
        this.key = key;
        this.value = value;
    }

}




/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
