class Solution {
    public int networkDelayTime(int[][] times, int N, int K) {
        if(times == null || times.length == 0) return 0;
        int[] distance = new int[N+1];//distance[i] means the distance from K to i
        for(int i = 0; i < distance.length; i++){
            distance[i] = Integer.MAX_VALUE;
        }
        distance[K] = 0;
        for(int i = 0; i <= N; i++){
            for(int[] time : times){
                int u = time[0], v = time[1], w = time[2];
                if(distance[u] != Integer.MAX_VALUE && distance[u] + w < distance[v])
                    distance[v] = distance[u] + w;
            }
        }
        int len = 0;
        for(int i = 1; i < distance.length; i++){
            len = Math.max(len, distance[i]);
        }
        return len == Integer.MAX_VALUE ? -1 : len;
    }
}

//Bellman-Ford algorithm
class Solution {
    public int networkDelayTime(int[][] times, int N, int K) {        
        int[] disTo = new int[N + 1];
        Arrays.fill(disTo, Integer.MAX_VALUE);
        disTo[K] = 0;
        for(int i = 1; i < N; i++){//n - 1 times
            for(int[] edge : times){
                int u = edge[0];
                int v = edge[1];
                int dis = edge[2];
                if(disTo[u] != Integer.MAX_VALUE && disTo[v] > disTo[u] + dis)
                    disTo[v] = Math.min(disTo[v], disTo[u] + dis);
            }
        }
        int result = 0;
        for(int i = 1; i < N + 1; i++){
            result = Math.max(result, disTo[i]);
        }
        return result == Integer.MAX_VALUE ? -1 : result;
    }
}

//Floyd-Warshall algorithm
//All-Pairs Shortest Paths

class Solution {
    public int networkDelayTime(int[][] times, int N, int K) {
        int[][] dis = new int[N][N];
        for(int i = 0; i < N; i++){
            for(int j = 0; j < N; j++){
                if(i == j) 
                    dis[i][j] = 0;
                else
                    dis[i][j] = Integer.MAX_VALUE;
            }
        }
        for(int[] edge : times){
            int u = edge[0] - 1;
            int v = edge[1] - 1;
            int weight = edge[2];
            dis[u][v] = weight;
        }
        
        for(int k = 0; k < N; k++){
            for(int i = 0; i < N; i++){
                for(int j = 0; j < N; j++){
                    if(dis[i][k] != Integer.MAX_VALUE && 
                       dis[k][j] != Integer.MAX_VALUE &&
                       dis[i][j] > dis[i][k] + dis[k][j]){
                        dis[i][j] = dis[i][k] + dis[k][j];
                    }
                }
            }
        }
        int result = 0;
        for(int distance : dis[K - 1]){
            result = Math.max(result, distance);
        }
        return result == Integer.MAX_VALUE ? -1 : result;
    }
}
