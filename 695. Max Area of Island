class Solution {
    
    int max = 0;
    public int maxAreaOfIsland(int[][] grid) {
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[0].length; j++){
                if(grid[i][j] == 1){
                    int area = dfs(grid, i, j);
                    max = Math.max(max, area);
                }
            }
        }
        return max;
    }
    
    public int dfs(int[][] grid, int x, int y){
        if(x < 0 || x >= grid.length || y < 0 || y >= grid[0].length || grid[x][y] == 0){
            return 0;
        }
        grid[x][y] = 0;
        return (1 + dfs(grid, x+1, y) + dfs(grid, x-1, y) + dfs(grid, x, y-1) + dfs(grid, x, y+1));
    }
}

class Solution {
    public int[][] pointGrid = null;
    
    public int maxAreaOfIsland(int[][] grid) {
        int area = 0;
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[0].length; j++){
                area = Math.max(area, areaOfIsland(grid, i, j));
            }
        }
        return area;
    }
    
    public int areaOfIsland(int[][] grid, int i, int j){
        if(i >= 0 && j >= 0 && i < grid.length && j < grid[0].length && grid[i][j] == 1){
            grid[i][j] = 0;
            return 1 + areaOfIsland(grid, i - 1, j) + areaOfIsland(grid, i + 1, j) + areaOfIsland(grid, i, j - 1) + areaOfIsland(grid, i, j + 1);
        }
        return 0;
    }
}


class Solution {
    public int maxAreaOfIsland(int[][] grid) {
        int maxArea = 0;
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[0].length; j++){
                if(grid[i][j] == 1)
                    maxArea = Math.max(maxArea, areaOfIsland(grid, i, j));
            }
        }
        return maxArea;
    }
    
    public int areaOfIsland(int[][] grid, int i, int j){
        if(i >= 0 && i < grid.length && j >= 0 && j < grid[0].length && grid[i][j] == 1){
            grid[i][j] = 0;
            return 1 + areaOfIsland(grid, i - 1, j) + areaOfIsland(grid, i + 1, j) + areaOfIsland(grid, i, j - 1) + areaOfIsland(grid, i, j + 1);
        }
        return 0;
    }
}


class Solution {
    private boolean visited[][];//visited[i][j]: (i, j) is calculated already
    public int maxAreaOfIsland(int[][] grid) {
        if(grid.length == 0) return 0;
        visited = new boolean[grid.length][grid[0].length];
        int sum = 0;
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[0].length; j++){
                if(!visited[i][j] && grid[i][j] == 1){
                    sum = Math.max(sum, calculate(grid, i, j));
                }
            }
        }
        return sum;
    }
    
    public int calculate(int[][] grid, int i, int j){
        if(i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || visited[i][j] || grid[i][j] == 0)
            return 0;
        else{
            visited[i][j] = true;
            return 1 + calculate(grid, i + 1, j) + calculate(grid, i - 1, j) + calculate(grid, i, j - 1) + calculate(grid, i, j + 1);
        }
            
    }
}
