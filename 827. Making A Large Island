class Solution {
    private int R, L;
    HashMap<Integer, Integer> colorArea = new HashMap<>();
    public int largestIsland(int[][] grid) {
        R = grid.length;
        L = grid[0].length;
        int color = 1;
        int max = 0;
        colorArea.put(0, 0);
        colorArea.put(1, 0);
        for(int i = 0; i < R; i++){
            for(int j = 0; j < L; j++){
                if(grid[i][j] == 1){
                    color++;
                    int area = getArea(grid, i, j, color);
                    colorArea.put(color, area);
                    max = Math.max(max, area);
                }
            }
        }
        for(int i = 0; i < R; i++){
            for(int j = 0; j < L; j++){
                if(grid[i][j] == 0){
                    int area = 1;
                    for(int newColor : getNeighborColor(grid, i, j)){
                        area += colorArea.get(newColor);
                    }
                    max = Math.max(max, area);
                }
            }
        }
        return max;
        
    }
    
    public Set<Integer> getNeighborColor(int[][] grid, int x, int y){
        Set<Integer> result = new HashSet<>();
        if(x < R-1) result.add(grid[x+1][y]);
        if(x >= 1) result.add(grid[x-1][y]);
        if(y < L-1) result.add(grid[x][y+1]);
        if(y >= 1) result.add(grid[x][y-1]);
        
        return result;
    }
    
    public int getArea(int[][] grid, int x, int y, int color){
        if(x < 0 || x >= grid.length || y < 0 || y >= grid[0].length || grid[x][y] != 1){
            return 0;
        }
        grid[x][y] = color;
        return 1 + getArea(grid, x-1, y, color) + getArea(grid, x, y-1, color) + getArea(grid, x+1, y, color) + getArea(grid, x, y+1, color);
    }
}
