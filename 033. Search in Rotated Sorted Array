class Solution {
    public int search(int[] nums, int target) {
        // we treat 7 as pivot
        int start = 0, end = nums.length - 1;
        while(start <= end){
            int mid = (start + end)/2;
            if(target == nums[mid])
                return mid;
            if(nums[start] > nums[mid]){
                if(nums[mid] < target && target <= nums[end]){
                    start = mid + 1;
                }else{
                    end = mid - 1;
                }
            }else{//nums[start] <= nums[mid]
                if(nums[mid] > target && target >= nums[start]){
                    end = mid - 1;
                }else{
                    start = mid + 1;
                }
            }
        }
        return -1;
    }
}


class Solution {
    //0,1,2,3,4,5,6,7 - > 7,8,0,1,2,3,4,5,6 -> nums[start] > nums[mid]
    //0,1,2,3,4,5,6,7 - > 3,4,5,6,7,8,0,1,2 -> nums[start] < nums[mid]
    public int search(int[] nums, int target) {
        int start = 0, end = nums.length - 1;
        while(start <= end){
            int mid = end + (start - end)/2;
            if(nums[mid] == target) return mid;
            if(nums[start] < nums[mid]){
               if(nums[mid] > target && target >= nums[start]){  //must target >= nums[start]
                   end = mid - 1;
               }else{
                   start = mid + 1;
               }
            }else{
                if(nums[mid] < target && target < nums[start]){ //must target < nums[start]
                    start = mid + 1;
                }else{
                    end = mid - 1;
                }
            }
        }
        return -1;
    }
}

