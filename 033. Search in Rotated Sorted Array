class Solution {
    public int search(int[] nums, int target) {
        int low = 0, high = nums.length; // [low, high)
        while(low < high){
            int mid = low+(high-low)/2;
            //we treat smallest node as pivot
            if(nums[mid] < nums[low]){
                //pivot is in the left half(exclusive)
                if(nums[low] > target && nums[mid] < target){
                    //target is in sorted part
                    low = mid+1;
                }else{
                    high = mid;
                }
            }else{
                //nums[mid] >= nums[low](inclusive)
                //pivot is in the right half
                if(nums[low] <= target && nums[mid] >= target){
                    //target is in sorted part
                    high = mid;
                }else{
                    low = mid+1;
                }
            }
        }
        return low < nums.length && nums[low] == target ? low : -1;
    }
}

class Solution {
    public int search(int[] nums, int target) {
        // we treat 7 as pivot
        int start = 0, end = nums.length - 1;
        while(start <= end){
            int mid = (start + end)/2;
            if(target == nums[mid])
                return mid;
            if(nums[start] > nums[mid]){
                if(nums[mid] < target && target <= nums[end]){
                    start = mid + 1;
                }else{
                    end = mid - 1;
                }
            }else{//nums[start] <= nums[mid]
                if(nums[mid] > target && target >= nums[start]){
                    end = mid - 1;
                }else{
                    start = mid + 1;
                }
            }
        }
        return -1;
    }
}


class Solution {
    //0,1,2,3,4,5,6,7 - > 7,8,0,1,2,3,4,5,6 -> nums[start] > nums[mid]
    //0,1,2,3,4,5,6,7 - > 3,4,5,6,7,8,0,1,2 -> nums[start] < nums[mid]
    public int search(int[] nums, int target) {
        int start = 0, end = nums.length - 1;
        while(start <= end){
            int mid = end + (start - end)/2;
            if(nums[mid] == target) return mid;
            if(nums[start] < nums[mid]){
               if(nums[mid] > target && target >= nums[start]){  //must target >= nums[start]
                   end = mid - 1;
               }else{
                   start = mid + 1;
               }
            }else{
                if(nums[mid] < target && target < nums[start]){ //must target < nums[start]
                    start = mid + 1;
                }else{
                    end = mid - 1;
                }
            }
        }
        return -1;
    }
}

public class Solution {
    public int search(int[] A, int target) {
        int lo = 0;
        int hi = A.length;
        while (lo < hi) {//search in [low, hi)
            int mid = lo + (hi - lo)/2;
            if (A[mid] == target) return mid;
            if (A[lo] <= A[mid]) {
                if (target >= A[lo] && target < A[mid]) {
                    hi = mid;
                } else {
                    lo = mid + 1;
                }
            } else {
                if (target > A[mid] && target <= A[hi - 1]) {
                    lo = mid + 1;
                } else {
                    hi = mid;
                }
            }
        }
        return (lo == A.length || A[lo] != target) ? -1 : lo;
    }
}
