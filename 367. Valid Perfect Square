class Solution {
    public boolean isPerfectSquare(int num) {
        int low = 1, high = num;
        while(low <= high){
            long mid = low + (high - low)/2;
            if(mid * mid == num){
                return true;
            }else if(mid * mid < num){
                low = (int)mid + 1;
            }else{
                high = (int)mid - 1;
            }
        }
        return false;
    }
}
//One thing to note is that we have to use long for mid to avoid mid*mid from overflow. Also, you can use long type for low and high to avoid type casting for mid from long to int. A

//Integer square root
class Solution {
    public boolean isPerfectSquare(int num) {
        long x = num;
        while(x * x > num){
            x = (x + num/x) >> 1;
        }
        return x * x == num;
    }
}
